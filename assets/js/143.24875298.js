(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{459:function(s,a,t){"use strict";t.r(a);var e=t(4),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"base"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base"}},[s._v("#")]),s._v(" base")]),s._v(" "),a("ul",[a("li",[a("code",[s._v(".")]),s._v(": 除换行符以外的所有字符")]),s._v(" "),a("li",[a("code",[s._v("^")]),s._v(": 字符串开头")]),s._v(" "),a("li",[a("code",[s._v("$")]),s._v(": 字符串结尾")]),s._v(" "),a("li",[a("code",[s._v("\\d,\\w,\\s")]),s._v(": 匹配数字、字符、空格")]),s._v(" "),a("li",[a("code",[s._v("\\D,\\W,\\S")]),s._v(": 匹配非数字、非字符、非空格")]),s._v(" "),a("li",[a("code",[s._v("[abc]")]),s._v(": 匹配 a、b 或 c 中的一个字母")]),s._v(" "),a("li",[a("code",[s._v("[a-z]")]),s._v(": 匹配 a 到 z 中的一个字母")]),s._v(" "),a("li",[a("code",[s._v("[^abc]")]),s._v(": 匹配除了 a、b 或 c 中的其他字母")]),s._v(" "),a("li",[a("code",[s._v("aa|bb")]),s._v(": 匹配 aa 或 bb")]),s._v(" "),a("li",[a("code",[s._v("?")]),s._v(": 0 次或 1 次匹配")]),s._v(" "),a("li",[a("code",[s._v("*")]),s._v(": 匹配 0 次或多次")]),s._v(" "),a("li",[a("code",[s._v("+")]),s._v(": 匹配 1 次或多次")]),s._v(" "),a("li",[a("code",[s._v("{n}")]),s._v(": 匹配 n 次")]),s._v(" "),a("li",[a("code",[s._v("{n,}")]),s._v(": 匹配 n 次以上")]),s._v(" "),a("li",[a("code",[s._v("{m,n}")]),s._v(": 最少 m 次, 最多 n 次匹配")]),s._v(" "),a("li",[a("code",[s._v("(expr)")]),s._v(": 捕获 expr 子模式,以 \\1 使用它")]),s._v(" "),a("li",[a("code",[s._v("(?:expr)")]),s._v(": 忽略捕获的子模式")]),s._v(" "),a("li",[a("code",[s._v("(?=expr)")]),s._v(": 正向预查模式 expr")]),s._v(" "),a("li",[a("code",[s._v("(?!expr)")]),s._v(": 负向预查模式 expr")]),s._v(" "),a("li",[a("code",[s._v("[\\u4e00-\\u9fa5]")]),s._v(": 匹配中文")])]),s._v(" "),a("h2",{attrs:{id:"case"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#case"}},[s._v("#")]),s._v(" case")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("runoo+b")]),s._v(", 可以匹配 runoob、runooob、runoooooob 等, + 号代表前面的字符必须至少出现一次(1 次或多次)尝试一下")]),s._v(" "),a("li",[a("code",[s._v("runoo*b")]),s._v(", 可以匹配 runob、runoob、runoooooob 等, "),a("code",[s._v("*")]),s._v(" 号代表前面的字符可以不出现, 也可以出现一次或者多次(0 次、或 1 次、或多次)尝试一下")]),s._v(" "),a("li",[a("code",[s._v("colou?r")]),s._v(" 可以匹配 color 或者 colour, ? 问号代表前面的字符最多只可以出现一次(0 次或 1 次)尝试一下")]),s._v(" "),a("li",[a("code",[s._v("colorChangeConfig(?!=undefined)")]),s._v(": 包含colorChangeConfig， 不包含"),a("code",[s._v("=undefined")])])]),s._v(" "),a("h3",{attrs:{id:"负向前瞻断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负向前瞻断言"}},[s._v("#")]),s._v(" 负向前瞻断言")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("/((?!api|_next/static|_next/image|.*\\.png$).*)")])])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("((?!...).*)")]),s._v(": 这是一个负向前瞻断言, 它表示后面的表达式不应该匹配某些模式")]),s._v(" "),a("li",[a("code",[s._v("?!api|_next/static|_next/image|.*\\.png$")]),s._v(": 这是一个子表达式, 包含了要排除的模式列表\n"),a("ul",[a("li",[a("code",[s._v("api")]),s._v(": 排除了路径中包含 api 的情况")]),s._v(" "),a("li",[a("code",[s._v("_next/static")]),s._v(": 排除了路径中包含 _next/static 的情况")]),s._v(" "),a("li",[a("code",[s._v("_next/image")]),s._v(": 排除了路径中包含 _next/image 的情况")]),s._v(" "),a("li",[a("code",[s._v(".*\\.png$")]),s._v(": 排除了路径以 .png 结尾的情况")])])])]),s._v(" "),a("p",[s._v("因此, 这个正则表达式的含义是: 匹配所有不包含 "),a("code",[s._v("api、_next/static、_next/image")]),s._v(" 和以 "),a("code",[s._v(".png")]),s._v(" 结尾的路径。换句话说, 中间件将会在这些路径之外的所有路径上执行")]),s._v(" "),a("h2",{attrs:{id:"复合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复合"}},[s._v("#")]),s._v(" 复合")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("^\\d\\.\\s[^\\x00-\\x7F]+: $")]),s._v(": 单数字开头, 随后是一个点号。 后面是空格, 随后是若干个非 ASCII 字符, 最后是一个冒号")]),s._v(" "),a("li",[a("code",[s._v("(^[^\\x00-\\x7F]+) ([a-zA-Z]) ([^\\x00-\\x7F]):")]),s._v(": 匹配类似 '按下 i 键: '")]),s._v(" "),a("li",[a("code",[s._v("([a-zA-Z.]+)")]),s._v(": 匹配连续的字母和.")]),s._v(" "),a("li",[a("code",[s._v("(^\\w.*):")]),s._v(": 字符开始, 到:")]),s._v(" "),a("li",[a("code",[s._v("(^[^\\s]+):")]),s._v(": 非空格连续")]),s._v(" "),a("li",[a("code",[s._v("^\\d\\. (.*?):")]),s._v(": 如果一行中带多个"),a("code",[s._v(":")]),s._v(",只想匹配到第一个: 截止, ("),a("code",[s._v("2. aaa: bbb:")]),s._v(")")])]),s._v(" "),a("h2",{attrs:{id:"other"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[s._v("#")]),s._v(" other")]),s._v(" "),a("h3",{attrs:{id:"捕获分组和非捕获分组的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#捕获分组和非捕获分组的区别"}},[s._v("#")]),s._v(" 捕获分组和非捕获分组的区别")]),s._v(" "),a("p",[s._v("理解非捕获分组的关键在于了解正则表达式中捕获分组和非捕获分组的区别")]),s._v(" "),a("RText",{attrs:{text:"捕获分组和非捕获分组的区别"}}),s._v(" "),a("ul",[a("li",[s._v("捕获分组: 用圆括号 "),a("code",[s._v("()")]),s._v(" 包围的部分，匹配的内容会被捕获，可以通过反向引用或者程序来提取这些匹配的内容")]),s._v(" "),a("li",[s._v("非捕获分组: 用 "),a("code",[s._v("(?:...)")]),s._v(" 包围的部分，匹配的内容不会被捕获，不会影响分组的编号，也不能通过反向引用来提取内容")])]),s._v(" "),a("RText",{attrs:{text:"举个例子"}}),s._v(" "),a("p",[s._v("假设我们有以下字符串和正则表达式:")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('字符串: "JsApiTransformWork and JsApiTransformTask"\n正则表达式: (\\w+)(Work|Task)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这个正则表达式中包含两个捕获分组:")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("(\\w+)")]),s._v(" 捕获字母或数字的连续字符串")]),s._v(" "),a("li",[a("code",[s._v("(Work|Task)")]),s._v(" 捕获 Work 或 Task")])]),s._v(" "),a("p",[s._v("如果你在代码中使用这个正则表达式来匹配字符串，例如在 JavaScript 中:")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(\\w+)(Work|Task)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransformWork and JsApiTransformTask"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" matches "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("matchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("matches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("结果会是这样的:")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransformWork"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransform"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Work"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransformTask"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransform"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Task"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这里 matches 包含两个匹配结果，每个匹配结果包含三个部分:")]),s._v(" "),a("p",[s._v('整个匹配的字符串，如 "JsApiTransformWork".\n第一个捕获分组的内容，如 "JsApiTransform".\n第二个捕获分组的内容，如 "Work" 或 "Task".')]),s._v(" "),a("RText",{attrs:{text:"使用非捕获分组"}}),s._v(" "),a("p",[s._v("如果你使用非捕获分组 "),a("code",[s._v("(?:Work|Task)")]),s._v("，正则表达式如下:")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("(\\w+)(?:Work|Task)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("再次运行上面的代码，结果会变成这样:")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransformWork"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransform"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransformTask"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JsApiTransform"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这里 "),a("code",[s._v("matches")]),s._v(" 仍然包含两个匹配结果，但每个匹配结果只有两个部分:")]),s._v(" "),a("ul",[a("li",[s._v('整个匹配的字符串，如 "JsApiTransformWork".')]),s._v(" "),a("li",[s._v('第一个捕获分组的内容，如 "JsApiTransform".')])]),s._v(" "),a("p",[s._v("这次 Work 或 Task 的匹配结果没有被捕获，也没有出现在 matches 数组中")]),s._v(" "),a("RText",{attrs:{text:"总结"}}),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("(?:Work|Task)")]),s._v(" 非捕获分组，意味着我们只想匹配 Work 或 Task，但不需要在匹配结果中提取或引用它们。这样可以简化结果，并且有助于避免不必要的捕获分组")]),s._v(" "),a("h3",{attrs:{id:"引用捕获组索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用捕获组索引"}},[s._v("#")]),s._v(" 引用捕获组索引")]),s._v(" "),a("blockquote",[a("p",[s._v("了解 $1")])]),s._v(" "),a("p",[s._v("正则表达式中的 "),a("code",[s._v("$1")]),s._v(" 不是用于匹配文本的模式, 而是用于在正则表达式替换中引用匹配组(捕获组)的特殊语法。它通常用于替换操作, 以便在替换文本中使用匹配的内容")]),s._v(" "),a("p",[s._v("在正则表达式替换中, 通常使用圆括号 "),a("code",[s._v("()")]),s._v(" 来创建捕获组, 然后可以使用 "),a("code",[s._v("$1")]),s._v("、"),a("code",[s._v("$2")]),s._v("、"),a("code",[s._v("$3")]),s._v(" 等来引用这些捕获组, 以在替换文本中插入匹配的内容。每个 "),a("code",[s._v("$n")]),s._v(" 表示引用第 n 个捕获组的内容")]),s._v(" "),a("p",[s._v("例如, 假设我们有以下文本:")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" John"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("Age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果我们想要提取名字和年龄, 并在替换文本中使用它们, 可以使用正则表达式:")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("Name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" (\\w+)"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("Age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" (\\d+)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在替换文本中, 我们可以使用 "),a("code",[s._v("$1")]),s._v(" 来引用第一个捕获组(名字), 使用 "),a("code",[s._v("$2")]),s._v(" 来引用第二个捕获组(年龄)。例如, 可以将其替换为:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("Hello, "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" You are "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(" years old.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("替换后的文本将是:")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("Hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" John"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" You are "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v(" years old"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("请注意, "),a("code",[s._v("$1")]),s._v(" 在正则表达式模式中不是一个有效的匹配, 而是在替换操作中用于引用捕获组的方式")]),s._v(" "),a("h2",{attrs:{id:"link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link"}},[s._v("#")]),s._v(" link")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.runoob.com/regexp/regexp-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("regex tutorial"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://c.runoob.com/front-end/854/",target:"_blank",rel:"noopener noreferrer"}},[s._v("tool online"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);a.default=n.exports}}]);