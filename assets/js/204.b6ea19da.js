(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{520:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("h3",{attrs:{id:"【ios】运行时消息传递与转发机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【ios】运行时消息传递与转发机制"}},[t._v("#")]),t._v(" 【iOS】运行时消息传递与转发机制")]),t._v(" "),s("p",[t._v("Objective-C 是一门非常动态的语言, 以至于确定调用哪个方法被推迟到了运行时, 而非编译时。与之相反, C 语言使用静态绑定, 也就是说, 在编译期就能决定程序运行时所应该调用的函数, 所以在 C 语言中, 如果某个函数没有实现, 编译时是不能通过的。而 Objective-C 是相对动态的语言, 运行时还可以向类中动态添加方法, 所以编译时并不能确定方法到底有没有对应的实现, 编译器在编译期间也就不能报错。 更多内容"),s("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1143355",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("具体的来说:")]),t._v(" "),s("p",[t._v("在 Objective-C 中, 如果一个类声明遵循某个协议(protocol), 而没有提供协议中的某个方法的实现, 编译器通常不会报错。这是因为 Objective-C 的动态性质使得在运行时有更多的灵活性。在运行时, 如果某个对象实现了遵循的协议, 但没有提供协议中的某个方法的实现, 那么在调用该方法时会导致运行时错误(通常是崩溃)。")]),t._v(" "),s("p",[t._v("所以, 与 C 语言不同, Objective-C 的编译器不会在编译期强制要求协议中的方法一定要被实现。这就需要开发者在代码中自行确保对象遵循的协议中的方法都有合适的实现。这也是为什么在 Objective-C 中通常会使用 "),s("code",[t._v("@optional")]),t._v(" 关键字来标记协议中的方法为可选的。使用 "),s("code",[t._v("@optional")]),t._v(" 关键字后, 编译器不会强制要求实现这些方法。")]),t._v(" "),s("p",[t._v("然而, 对于某些协议, 如果某个方法是强制必须实现的, 可以在协议中使用 "),s("code",[t._v("@required")]),t._v(" 关键字标记, 以确保类遵循该协议时必须提供方法的实现。这样, 如果某个类没有提供必需的实现, 编译器会发出警告。")]),t._v(" "),s("p",[t._v("总结: 在 Objective-C 中, 协议方法是否必须实现主要取决于协议定义时是否使用 "),s("code",[t._v("@required")]),t._v(" 或 "),s("code",[t._v("@optional")]),t._v(" 关键字来明确规定, 而编译器通常不会在编译期报告缺少实现的警告或错误。编译器会在运行时检查方法是否被实现, 如果没有实现, 会导致运行时错误。")]),t._v(" "),s("h3",{attrs:{id:"runtime"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runtime"}},[t._v("#")]),t._v(" runtime")]),t._v(" "),s("p",[s("strong",[t._v("动态替换方法")])]),t._v(" "),s("p",[t._v("示例代码:")]),t._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[t._v("Class buttonClass "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSEL oriSel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sendAction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("forEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMethod oriMethod "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buttonClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oriSel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nSEL mySel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("@selector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mySendAction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("to"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("forEvent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMethod myMethod "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_getInstanceMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buttonClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mySel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nBOOL isAdd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_addMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buttonClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oriSel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getImplementation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getTypeEncoding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isAdd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("class_replaceMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buttonClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mySel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getImplementation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oriMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_getTypeEncoding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oriMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("method_exchangeImplementations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oriMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" myMethod"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("上述代码是对 UIButton 类的方法进行交换, 将 "),s("code",[t._v("sendAction:to:forEvent:")]),t._v("替换成 "),s("code",[t._v("mySendAction:to:forEvent:")]),t._v("。当按钮被点击时, 实际上调用了 mySendAction 方法, 其中可以控制按钮的点击行为。这种方法交换的方式可以用于在不修改原有代码的情况下, 增加按钮点击的控制逻辑。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"uitableview-刷新原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#uitableview-刷新原理"}},[t._v("#")]),t._v(" UITableView 刷新原理")]),t._v(" "),s("p",[t._v("TODO:  绑定数据源")]),t._v(" "),s("p",[t._v("通常, "),s("code",[t._v("UITableView")]),t._v(" 中刷新的方法是 "),s("code",[t._v("reloadData")]),t._v(" 和 "),s("code",[t._v("reloadRowsAtIndexPaths:withRowAnimation:")]),t._v("。以下是关于 UITableView 刷新的基本原理:")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("数据源和委托对象: "),s("code",[t._v("UITableView")]),t._v(" 使用数据源和委托对象来获取表格视图的数据和控制其行为。数据源通常是一个对象, 负责提供表格视图所需的数据, 如行数、每行的内容等。委托对象则负责响应用户交互事件, 如选中行、滚动等。")])]),t._v(" "),s("li",[s("p",[t._v("刷新数据源: 当你的应用程序中的数据发生变化时, 你需要相应地更新数据源。这可以是数组、字典或任何用于存储表格数据的数据结构。")])]),t._v(" "),s("li",[s("p",[t._v("刷新表格视图: 要刷新表格视图以反映数据源的更改, 你可以调用 "),s("code",[t._v("reloadData")]),t._v(" 方法。这将导致表格视图重新加载并重新绘制所有的行和部分。")])])]),t._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tableView reloadData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("刷新指定行: 如果只需要刷新特定行或行范围, 可以使用 "),s("code",[t._v("reloadRowsAtIndexPaths:withRowAnimation:")]),t._v(" 方法。这个方法允许你指定要刷新的行的索引路径, 还可以指定刷新时的动画效果。")])]),t._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[t._v("NSIndexPath "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("indexPathToReload "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NSIndexPath indexPathForRow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" inSection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tableView reloadRowsAtIndexPaths"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("@")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("indexPathToReload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" withRowAnimation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("UITableViewRowAnimationAutomatic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ol",{attrs:{start:"5"}},[s("li",[t._v("动画效果: "),s("code",[t._v("reloadRowsAtIndexPaths:withRowAnimation:")]),t._v(" 方法中的 "),s("code",[t._v("withRowAnimation")]),t._v(" 参数允许你指定刷新时的动画效果。这些效果包括渐变、上下滑动等, 以使刷新更加平滑和可视化。")])]),t._v(" "),s("p",[t._v("总的来说, UITableView 的刷新机制是通过数据源提供数据, 然后通过调用相关方法来通知表格视图进行更新。这允许你在应用程序中的数据发生变化时, 以一种有序和可控的方式更新表格视图, 以便用户能够看到最新的数据。")]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://medium.com/good-morning-swift/ios-view-controller-life-cycle-2a0f02e74ff5",target:"_blank",rel:"noopener noreferrer"}},[t._v("iOS View Controller Life Cycle"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);