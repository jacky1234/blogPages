(window.webpackJsonp=window.webpackJsonp||[]).push([[212],{528:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"common"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#common"}},[t._v("#")]),t._v(" common")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("int('1388', 16)")]),t._v(": 进制转换")])]),t._v(" "),s("h2",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" string")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://docs.python.org/3/library/string.html#module-string",target:"_blank",rel:"noopener noreferrer"}},[t._v("link"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"string-common"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-common"}},[t._v("#")]),t._v(" string common")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("join()")]),t._v(": "),s("code",[t._v("join()")]),t._v(" method expects all elements in the list (or any iterable) to be strings")]),t._v(" "),s("li",[s("code",[t._v("split()")])]),t._v(" "),s("li",[s("code",[t._v("strip()")]),t._v(": Removes leading (left) and trailing (right) whitespace from a string.")]),t._v(" "),s("li",[s("code",[t._v("lstrip()")]),t._v(": Removes leading (left) whitespace from a string.")]),t._v(" "),s("li",[s("code",[t._v("rstrip()")]),t._v(": Removes trailing (right) whitespace from a string.")])]),t._v(" "),s("hr"),t._v(" "),s("RText",{attrs:{text:"f-strings"}}),t._v(" "),s("blockquote",[s("p",[t._v("Formatted string literals (also called f-strings for short) let you include the value of Python expressions inside a string by prefixing the string with f or F and writing expressions as {expression}.\n"),s("a",{attrs:{href:"https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method",target:"_blank",rel:"noopener noreferrer"}},[t._v("内容导航"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'knights'")]),t._v("\nword "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ni'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'We are the ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(' who say "')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("word"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("!\"'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("RText",{attrs:{text:"str.format()"}}),t._v(" "),s("blockquote",[s("p",[t._v("Old string formatting。使用 % 符号")])]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("import")]),t._v(" math\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" print"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The value of pi is approximately %5.3f.'")]),t._v(" % math.pi"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nThe value of pi is approximately "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.142")]),t._v(".\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"tuples-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tuples-list"}},[t._v("#")]),t._v(" tuples/list")]),t._v(" "),s("p",[t._v("Python 中的元组(Tuples)和列表(Lists)都是用于存储一组项目的数据结构, 但它们在以下方面有一些关键的区别:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("可变性(Mutability):")]),t._v(" "),s("ul",[s("li",[t._v("Lists 是可变的(Mutable), 这意味着你可以随时添加、删除或修改列表中的元素。使用方括号 [] 来表示列表。")]),t._v(" "),s("li",[t._v("Tuples 是不可变的(Immutable), 一旦创建了一个元组, 就不能更改其内容, 包括添加、删除或修改元素。使用圆括号 () 来表示元组。")])])]),t._v(" "),s("li",[s("RText",{attrs:{text:"创建"}}),t._v(":\n"),s("ul",[s("li",[t._v("列表通过方括号来创建, 如: "),s("code",[t._v("my_list = [1, 2, 3]")]),t._v("。")]),t._v(" "),s("li",[t._v("元组通过圆括号来创建, 如: "),s("code",[t._v("my_tuple = (1, 2, 3)")]),t._v("。")])])],1),t._v(" "),s("li",[s("RText",{attrs:{text:"访问元素"}}),t._v(":\n"),s("ul",[s("li",[t._v("你可以使用索引来访问列表和元组中的元素, 例如 my_list[0] 或 my_tuple[1]。")])])],1),t._v(" "),s("li",[s("RText",{attrs:{text:"迭代"}}),t._v(":\n"),s("ul",[s("li",[t._v("你可以使用 for 循环来迭代列表和元组中的元素。")])])],1),t._v(" "),s("li",[s("RText",{attrs:{text:"方法和操作"}}),t._v(":\n"),s("ul",[s("li",[t._v("列表提供了更多的方法和操作, 因为它们是可变的。你可以使用方法如 append(), extend(), remove(), pop() 等来修改列表。")]),t._v(" "),s("li",[t._v("元组由于是不可变的, 提供的方法较少。你可以使用方法如 count() 和 index() 来检查元组中的元素。")])])],1),t._v(" "),s("li",[s("RText",{attrs:{text:"性能"}}),t._v(":\n"),s("ul",[s("li",[t._v("由于元组是不可变的, 它们的性能通常比列表更高, 特别是在迭代和访问元素方面。")])])],1)]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个列表")]),t._v("\nmy_list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个元组")]),t._v("\nmy_tuple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改列表")]),t._v("\nmy_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合法, 列表是可变的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改元组(将会引发TypeError异常)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# my_tuple[0] = 10  # 不合法, 元组是不可变的")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("总之, 当你需要一个不可变的有序集合时, 可以使用元组。当你需要一个可变的有序集合时, 可以使用列表。选择哪个取决于你的具体需求。")]),t._v(" "),s("h2",{attrs:{id:"dict"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[t._v("#")]),t._v(" dict")]),t._v(" "),s("ol",[s("li",[t._v("使用键索引赋值:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v('my_dict["a"] = 42')]),t._v(" 更新键'a'对应的值")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("使用 update 方法:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("dict1.update(dict2)")]),t._v(", update 方法可以用来将一个字典合并到另一个字典中")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("使用 dict 构造函数:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("my_dict = dict(a=42, b=2)")])])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("使用字典解析: 字典解析允许你通过遍历其他可迭代对象的方式来更新字典。")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("my_dict = {k: v * 2 for k, v in my_dict.items()}")]),t._v(", 将所有值乘以 2")])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("使用 "),s("code",[t._v("setdefault")]),t._v(" 方法:  setdefault 方法可以用于在字典中添加新键-值对, 如果键已存在, 则不进行更新。")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v('my_dict.setdefault("c", 42)')]),t._v(" 添加新键'c', 如果已存在则不修改")])]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[t._v("使用 dict 的 fromkeys 方法:  fromkeys 方法可以用于创建一个具有指定键的新字典")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("keys "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ndefault_value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nmy_dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fromkeys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" default_value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个新字典")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("hr"),t._v(" "),s("RText",{attrs:{text:"iterator"}}),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("enumerate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid_child_map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(", ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("pid_child_map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"assert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert"}},[t._v("#")]),t._v(" assert")]),t._v(" "),s("blockquote",[s("p",[t._v("下面示例的引用"),s("a",{attrs:{href:"https://github.com/hluwa/Wallbreaker/blob/master/wallbreaker/connection.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    device "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" frida"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_usb_device"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" device "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" device\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    device "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" frida"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_remote_device"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" device "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" device\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# This line checks if device is None. If it is, an assertion error with the message "Unable to connect android device" is raised.')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" device"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unable to connect android device"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("RText",{attrs:{text:"说明"}}),t._v(" "),s("ul",[s("li",[s("code",[t._v("device = frida.get_usb_device() if device is None else device")]),t._v(": 这是一个条件语句, 用于获取 USB 连接的 Frida 设备对象。如果在之前的代码中已经定义了 device 变量, 那么不再执行 "),s("code",[t._v("frida.get_usb_device()")]),t._v(", 而直接使用已有的 device。 (后置 if 条件写法, 也被称为条件表达式或三元条件表达式)。等价于:")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" device "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    device "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" frida"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_usb_device"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"条件表达式-三元运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件表达式-三元运算符"}},[t._v("#")]),t._v(" 条件表达式/三元运算符")]),t._v(" "),s("p",[t._v("条件表达式/三元运算符的基本语法形式如下:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value_if_true"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("value_if_false"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("RText",{attrs:{text:"example as above:"}}),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("device "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" frida"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_usb_device"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" device "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" device\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("它的作用是在 "),s("code",[t._v("frida.get_usb_device()")]),t._v(" 返回 None 的情况下使用默认设备, 否则使用 frida.get_usb_device() 返回的设备. 这种写法可以用来简洁地表达条件判断和变量赋值")]),t._v(" "),s("h2",{attrs:{id:"list-comprehension"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-comprehension"}},[t._v("#")]),t._v(" List Comprehension")]),t._v(" "),s("blockquote",[s("p",[t._v("列表推导(List Comprehension)是 Python 中一种简洁而强大的语法, 用于从可迭代对象(如列表、元组、集合等)创建新的列表。列表推导可以替代常规的循环和条件语句, 使得代码更加简洁和易读。 "),s("a",{attrs:{href:"https://docs.python.org/3/tutorial/introduction.html#lists",target:"_blank",rel:"noopener noreferrer"}},[t._v("link"),s("OutboundLink")],1)])]),t._v(" "),s("RText",{attrs:{text:"列表推导的基本语法形式如下:"}}),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("expression "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" iterable "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("RText",{attrs:{text:"case:"}}),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dirs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" files "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("walk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("directory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# new_dirs = []")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for d in dirs:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     if not git_ignore(os.path.join(root, d)) and not d.startswith('.'):")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         new_dirs.append(d)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# dirs[:] = new_dirs")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上面的代码被简化如下: 使用列表推导式(List Comprehension)实现了filter()函数的功能。下面是列表推导式与filter()函数的比较:")]),t._v("\n    dirs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("d "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" dirs "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" git_ignore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startswith"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    files"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" file_name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" files "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" git_ignore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" file_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" file_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startswith"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("endswith"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" ext "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" valid_extensions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h2",{attrs:{id:"yield"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[t._v("#")]),t._v(" yield")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("yield")]),t._v(" 是 Python 中一个关键的关键字, 通常用于创建生成器(Generator)。生成器是一种特殊的迭代器, 允许你按需产生值, 而不是一次性生成所有值。这在处理大量数据或需要节省内存的情况下非常有用。")])]),t._v(" "),s("RText",{attrs:{text:"以下是关于 `yield` 关键字的一些重要概念:"}}),t._v(" "),s("ol",[s("li",[s("p",[t._v("生成器函数: 生成器函数是包含 "),s("code",[t._v("yield")]),t._v(" 语句的函数。当你调用生成器函数时, 它不会执行函数体, 而是返回一个生成器对象。")])]),t._v(" "),s("li",[s("p",[t._v("生成器对象: 生成器对象可以像迭代器一样遍历, 但是它是惰性生成的。每次调用生成器的 "),s("code",[t._v("__next__()")]),t._v(" 方法或使用 for 循环时, 生成器函数将从上次的 "),s("code",[t._v("yield")]),t._v(" 语句处继续执行, 直到遇到下一个 "),s("code",[t._v("yield")]),t._v(" 语句。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("yield")]),t._v(" 语句: "),s("code",[t._v("yield")]),t._v(" 用于产生一个值, 并将控制权返回给调用者。生成器函数的状态将被冻结, 等待下一次迭代时继续执行。这使得你可以逐步生成数据, 而不必一次性生成所有数据。")])])]),t._v(" "),s("p",[t._v("以下是一个示例, 演示如何使用 "),s("code",[t._v("yield")]),t._v(" 创建一个简单的生成器:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("simple_generator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建生成器对象")]),t._v("\ngen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" simple_generator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 遍历生成器")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" gen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("这个生成器函数 "),s("code",[t._v("simple_generator")]),t._v(" 逐步生成数字 1、2、3。每次迭代都会执行到下一个 "),s("code",[t._v("yield")]),t._v(" 语句, 产生一个值。生成器对象可以通过迭代来获取这些值。")]),t._v(" "),s("p",[s("code",[t._v("yield")]),t._v(" 是 Python 中强大的工具, 它可以"),s("RText",{attrs:{text:"用于处理大型数据集、无限序列、惰性计算等各种场景"}}),t._v("。通过创建生成器, 你可以有效地处理数据而不会占用大量内存。")],1),t._v(" "),s("h2",{attrs:{id:"文件操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件操作"}},[t._v("#")]),t._v(" 文件操作")]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files",target:"_blank",rel:"noopener noreferrer"}},[t._v("link"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文件保存")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./89562-1-235.html'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("write"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"functools"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functools"}},[t._v("#")]),t._v(" functools")]),t._v(" "),s("h3",{attrs:{id:"reduce"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[t._v("#")]),t._v(" reduce")]),t._v(" "),s("p",[s("code",[t._v("functools.reduce")]),t._v(" 是 "),s("code",[t._v("Python")]),t._v(" 标准库中的一个函数, 用于"),s("RText",{attrs:{text:"对可迭代对象中的元素进行累积计算"}}),t._v("。它的工作方式类似于累积函数, 可以用于执行类似于求和、乘积、最大值、最小值等操作。"),s("code",[t._v("functools.reduce")]),t._v(" 接受两个参数:")],1),t._v(" "),s("ul",[s("li",[t._v("一个二元操作函数, 它接受两个参数并返回一个结果。这个函数用于定义要在累积过程中执行的操作。")]),t._v(" "),s("li",[t._v("一个可迭代的对象, 其中包含要进行累积操作的元素。")])]),t._v(" "),s("p",[s("code",[t._v("functools.reduce")]),t._v(" 会从可迭代对象中按顺序取出元素, 将它们依次传递给操作函数, 并不断更新一个累积的结果值。最终, "),s("code",[t._v("functools.reduce")]),t._v(" 返回累积的结果。")]),t._v(" "),s("p",[t._v("下面是一个示例, 演示如何使用 "),s("code",[t._v("functools.reduce")]),t._v(" 来计算列表中元素的累积和:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" functools\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义一个二元操作函数, 用于计算两个数的和")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 要进行累积操作的列表")]),t._v("\nnumbers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 functools.reduce 计算累积和")]),t._v("\nresult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" functools"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出 15, 即 1 + 2 + 3 + 4 + 5 的和")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("在这个示例中, "),s("code",[t._v("functools.reduce")]),t._v(" 使用 "),s("code",[t._v("add")]),t._v(" 函数对列表 "),s("code",[t._v("numbers")]),t._v(" 中的元素进行累积求和, 最终得到和 15。您可以根据需要定义不同的操作函数, 以执行不同的累积操作。")]),t._v(" "),s("h2",{attrs:{id:"link"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#link"}},[t._v("#")]),t._v(" link")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://docs.python.org/3/tutorial/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("python tutorial"),s("OutboundLink")],1),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://docs.python.org/3/tutorial/controlflow.html#",target:"_blank",rel:"noopener noreferrer"}},[t._v("4. controlflow"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.w3schools.com/python/default.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("w3school-python"),s("OutboundLink")],1),t._v(", 基础, matplotLib,机器学习等等")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/jacky1234/learnPython",target:"_blank",rel:"noopener noreferrer"}},[t._v("learnPython"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/lgwsgc/python",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/lgwsgc/python"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/jacky1234/python_script",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/jacky1234/python_script"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/lijin-THU/notes-python",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/lijin-THU/notes-python"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://pypi.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://pypi.org/"),s("OutboundLink")],1),t._v(" 模块搜索")])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);