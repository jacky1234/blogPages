(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{531:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[s("a",{attrs:{href:"https://pandas.pydata.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pandas"),s("OutboundLink")],1),t._v(" is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language.")])]),t._v(" "),s("h2",{attrs:{id:"常用-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用-api"}},[t._v("#")]),t._v(" 常用 API")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("导入数据:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pd.read_csv(filename)")]),t._v(": 从 CSV 文件导入数据")]),t._v(" "),s("li",[s("code",[t._v("pd.read_table(filename)")]),t._v(": 从限定分隔符的文本文件导入数据")]),t._v(" "),s("li",[s("code",[t._v("pd.read_excel(filename)")]),t._v(": 从 Excel 文件导入数据")]),t._v(" "),s("li",[s("code",[t._v("pd.read_sql(query, connection_object)")]),t._v(": 从 SQL 表/库导入数据")]),t._v(" "),s("li",[s("code",[t._v("pd.read_json(json_string)")]),t._v(": 从 JSON 格式的字符串导入数据")]),t._v(" "),s("li",[s("code",[t._v("pd.read_html(url)")]),t._v(": 解析 URL、字符串或者 HTML 文件, 抽取其中的 tables 表格")]),t._v(" "),s("li",[s("code",[t._v("pd.read_clipboard()")]),t._v(": 从你的粘贴板获取内容, 并传给 read_table()")]),t._v(" "),s("li",[s("code",[t._v("pd.DataFrame(dict)")]),t._v(": 从字典对象导入数据, Key 是列名, Value 是数据")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("导出数据:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("df.to_csv(filename)")]),t._v(": 导出数据到 CSV 文件")]),t._v(" "),s("li",[s("code",[t._v("df.to_excel(filename)")]),t._v(": 导出数据到 Excel 文件")]),t._v(" "),s("li",[s("code",[t._v("df.to_sql(table_name, connection_object)")]),t._v(": 导出数据到 SQL 表")]),t._v(" "),s("li",[s("code",[t._v("df.to_json(filename)")]),t._v(": 以 Json 格式导出数据到文本文件")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("创建测试对象:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pd.DataFrame(np.random.rand(20,5))")]),t._v(": 创建 20 行 5 列的随机数组成的 DataFrame 对象")]),t._v(" "),s("li",[s("code",[t._v("pd.Series(my_list)")]),t._v(": 从可迭代对象 my_list 创建一个 Series 对象")]),t._v(" "),s("li",[s("code",[t._v("df.index = pd.date_range('1900/1/30', periods=df.shape[0])")]),t._v(": 增加一个日期索引")]),t._v(" "),s("li",[s("code",[t._v("np.random.randn(5, 5)")]),t._v(": 生成一个形状为 (5, 5) 的 NumPy 数组, 其中的值是从标准正态分布(均值为 0, 标准差为 1)中随机抽取的")]),t._v(" "),s("li",[s("code",[t._v("np.random.rand(10, 2) * 5")]),t._v(": 首先生成一个形状为 (10, 2) 的随机数组, 其中的值在 0 到 1 之间, 然后将所有值乘以 5")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("查看、检查数据:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("df.head(n)")]),t._v(": 查看 DataFrame 对象的前 n 行")]),t._v(" "),s("li",[s("code",[t._v("df.tail(n)")]),t._v(": 查看 DataFrame 对象的最后 n 行")]),t._v(" "),s("li",[s("code",[t._v("df.shape")]),t._v(": 查看行数和列数")]),t._v(" "),s("li",[s("code",[t._v("df.info()")]),t._v(": 查看索引、数据类型和内存信息")]),t._v(" "),s("li",[s("code",[t._v("df.describe()")]),t._v(": 查看数值型列的汇总统计")]),t._v(" "),s("li",[s("code",[t._v("s.value_counts(dropna=False)")]),t._v(": 查看 Series 对象的唯一值和计数")]),t._v(" "),s("li",[s("code",[t._v("df.apply(pd.Series.value_counts)")]),t._v(": 查看 DataFrame 对象中每一列的唯一值和计数")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("数据选取:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("df[col]")]),t._v(": 根据列名, 并以 Series 的形式返回列")]),t._v(" "),s("li",[s("code",[t._v("df[[col1, col2]]")]),t._v(": 以 DataFrame 形式返回多列")]),t._v(" "),s("li",[s("code",[t._v("s.iloc[0]")]),t._v(": 按位置选取数据")]),t._v(" "),s("li",[s("code",[t._v("s.loc['index_one']")]),t._v(": 按索引选取数据")]),t._v(" "),s("li",[s("code",[t._v("s.loc[lambda df: df['A'] > 0, :]")])]),t._v(" "),s("li",[s("code",[t._v("df.at[0, 'xxx']")]),t._v(": 只能接受一行和一列作为输入参数。")]),t._v(" "),s("li",[s("code",[t._v("df.iloc[0,:]")]),t._v(": 返回第一行")]),t._v(" "),s("li",[s("code",[t._v("df.iloc[0,0]")]),t._v(": 返回第一列的第一个元素")]),t._v(" "),s("li",[s("code",[t._v("df.iloc[:, :2]")]),t._v(": 返回前两列数据")]),t._v(" "),s("li",[s("code",[t._v("df.iloc[:, lambda df: [0, 1]]")])]),t._v(" "),s("li",[s("code",[t._v("df.values[:,:-1]")]),t._v(": 返回除了最后一列的其他列的所以数据")]),t._v(" "),s("li",[s("code",[t._v("df.query('[1, 2] not in c')")]),t._v(": 返回 c 列中不包含 1, 2 的其他数据集")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("数据清理:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("df.columns = ['a','b','c']")]),t._v(": 重命名列名")]),t._v(" "),s("li",[s("code",[t._v("pd.isnull()")]),t._v(": 检查 DataFrame 对象中的空值, 并返回一个 Boolean 数组")]),t._v(" "),s("li",[s("code",[t._v("pd.notnull()")]),t._v(": 检查 DataFrame 对象中的非空值, 并返回一个 Boolean 数组")]),t._v(" "),s("li",[s("code",[t._v("df.dropna()")]),t._v(": 删除所有包含空值的行")]),t._v(" "),s("li",[s("code",[t._v("df.dropna(axis=1)")]),t._v(": 删除所有包含空值的列")]),t._v(" "),s("li",[s("code",[t._v("df.dropna(axis=1,thresh=n)")]),t._v(": 删除所有小于 n 个非空值的行")]),t._v(" "),s("li",[s("code",[t._v("df.fillna(x)")]),t._v(": 用 x 替换 DataFrame 对象中所有的空值")]),t._v(" "),s("li",[s("code",[t._v("s.astype(float)")]),t._v(": 将 Series 中的数据类型更改为 float 类型")]),t._v(" "),s("li",[s("code",[t._v("s.replace(1,'one')")]),t._v(": 用‘one’代替所有等于 1 的值")]),t._v(" "),s("li",[s("code",[t._v("s.replace([1,3],['one','three'])")]),t._v(": 用'one'代替 1, 用'three'代替 3")]),t._v(" "),s("li",[s("code",[t._v("df.rename(columns=lambda x: x + 1)")]),t._v(": 批量更改列名")]),t._v(" "),s("li",[s("code",[t._v("df.rename(columns={'old_name': 'new\\* name'})")]),t._v(": 选择性更改列名")]),t._v(" "),s("li",[s("code",[t._v("df.set_index('column_one')")]),t._v(": 更改索引列")]),t._v(" "),s("li",[s("code",[t._v("df.rename(index=lambda x: x + 1)")]),t._v(": 批量重命名索引")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("数据处理: :Filter、Sort 和 GroupBy")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("df[df[col] > 0.5]")]),t._v(": 选择 col 列的值大于 0.5 的行")]),t._v(" "),s("li",[s("code",[t._v("df.sort_values(col1)")]),t._v(": 按照列 col1 排序数据, 默认升序排列")]),t._v(" "),s("li",[s("code",[t._v("df.sort_values(col2, ascending=False)")]),t._v(": 按照列 col1 降序排列数据")]),t._v(" "),s("li",[s("code",[t._v("df.sort_values([col1,col2], ascending=[True,False])")]),t._v(": 先按列 col1 升序排列, 后按 col2 降序排列数据")]),t._v(" "),s("li",[s("code",[t._v("df.groupby(col)")]),t._v(": 返回一个按列 col 进行分组的 Groupby 对象")]),t._v(" "),s("li",[s("code",[t._v("df.groupby([col1,col2])")]),t._v(": 返回一个按多列进行分组的 Groupby 对象")]),t._v(" "),s("li",[s("code",[t._v("df.groupby(col1)[col2]")]),t._v(": 返回按列 col1 进行分组后, 列 col2 的均值")]),t._v(" "),s("li",[s("code",[t._v("df.pivot_table(index=col1, values=[col2,col3], aggfunc=max)")]),t._v(": 创建一个按列 col1 进行分组, 并计算 col2 和 col3 的最大值的数据透视表")]),t._v(" "),s("li",[s("code",[t._v("df.groupby(col1).agg(np.mean)")]),t._v(": 返回按列 col1 分组的所有列的均值")]),t._v(" "),s("li",[s("code",[t._v("df.eval")]),t._v(": 用于在 DataFrame 上执行表达式的方法, 这些表达式通常包含 DataFrame 的列。"),s("code",[t._v("eval()")]),t._v(" 方法能够进行高效的列操作, 因为它在内部利用了底层的 NumPy 操作\n"),s("code",[t._v("eval")]),t._v(" 方法用于执行字符串表达式作为有效的 Python 表达式, 用于计算并生成新列或替换现有列的值。")]),t._v(" "),s("li",[s("code",[t._v("data.apply(np.mean)")]),t._v(": 对 DataFrame 中的每一列应用函数 np.mean")]),t._v(" "),s("li",[s("code",[t._v("data.apply(np.max,axis=1)")]),t._v(": 对 DataFrame 中的每一行应用函数 np.max")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("数据合并:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("df1.append(df2)")]),t._v(": 将 df2 中的行添加到 df1 的尾部")]),t._v(" "),s("li",[s("code",[t._v("df.concat([df1, df2],axis=1)")]),t._v(": 将 df2 中的列添加到 df1 的尾部")]),t._v(" "),s("li",[s("code",[t._v("df1.join(df2,on=col1,how='inner')")]),t._v(": 对 df1 的列和 df2 的列执行 SQL 形式的 join")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("数据统计:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("df.describe()")]),t._v(": 查看数据值列的汇总统计")]),t._v(" "),s("li",[s("code",[t._v("df.mean()")]),t._v(": 返回所有列的均值")]),t._v(" "),s("li",[s("code",[t._v("df.corr()")]),t._v(": 返回列与列之间的相关系数")]),t._v(" "),s("li",[s("code",[t._v("df.count()")]),t._v(": 返回每一列中的非空值的个数")]),t._v(" "),s("li",[s("code",[t._v("df.max()")]),t._v(": 返回每一列的最大值")]),t._v(" "),s("li",[s("code",[t._v("df.min()")]),t._v(": 返回每一列的最小值")]),t._v(" "),s("li",[s("code",[t._v("df.median()")]),t._v(": 返回每一列的中位数")]),t._v(" "),s("li",[s("code",[t._v("df.std()")]),t._v(": 返回每一列的标准差")]),t._v(" "),s("li",[s("code",[t._v("(df[xx] > 0).sum()")]),t._v(": 返回 xx 大于 0 的个数")])])])]),t._v(" "),s("h2",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" api")]),t._v(" "),s("h3",{attrs:{id:"merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" merge")]),t._v(" "),s("p",[t._v("pandas 库提供了多个用于合并数据的 API, 其中最常用的是 merge 函数。merge 函数用于将两个或多个 DataFrame 对象按照一个或多个键(共同的列)进行合并。以下是 merge 函数的基本用法和一些关键参数:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" how"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inner'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" on"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" left_on"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right_on"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" left_index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right_index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sort"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[s("code",[t._v("left")]),t._v(": 要合并的左侧 DataFrame。")]),t._v(" "),s("li",[s("code",[t._v("right")]),t._v(": 要合并的右侧 DataFrame。")]),t._v(" "),s("li",[s("code",[t._v("how")]),t._v(": 指定如何合并。常见选项包括:\n"),s("ul",[s("li",[t._v("'inner'(默认值): 取两个 DataFrame 的交集, 只保留两者都有的键。")]),t._v(" "),s("li",[t._v("'outer': 取两个 DataFrame 的并集, 保留所有键, 缺失的数据用 NaN 填充。")]),t._v(" "),s("li",[t._v("'left': 以左侧 DataFrame 的键为基准, 保留所有左侧键。")]),t._v(" "),s("li",[t._v("'right': 以右侧 DataFrame 的键为基准, 保留所有右侧键。")])])]),t._v(" "),s("li",[s("code",[t._v("on")]),t._v(": 指定用于合并的列名(键)。可以是单个列名的字符串, 也可以是多个列名组成的列表。")]),t._v(" "),s("li",[s("code",[t._v("left_on")]),t._v(": 指定左侧 DataFrame 用于合并的列名(键)。")]),t._v(" "),s("li",[s("code",[t._v("right_on")]),t._v(": 指定右侧 DataFrame 用于合并的列名(键)。")]),t._v(" "),s("li",[s("code",[t._v("left_index")]),t._v(" 和 "),s("code",[t._v("right_index")]),t._v(": 如果为 True, 表示使用左侧或右侧 DataFrame 的索引作为合并键。")]),t._v(" "),s("li",[s("code",[t._v("sort")]),t._v(": 如果为 True, 则合并后的结果将按合并键排序。")])]),t._v(" "),s("p",[t._v("示例用法:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并两个DataFrame, 以'key'列为基准, 默认使用'inner'方式")]),t._v("\nresult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("df1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" df2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" on"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用多个键进行合并")]),t._v("\nresult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("df1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" df2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" on"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以左侧DataFrame的索引为合并键")]),t._v("\nresult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("df1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" df2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" left_index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right_index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以左侧DataFrame的'key'列和右侧DataFrame的'key'列进行合并, 使用'outer'方式")]),t._v("\nresult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("df1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" df2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" on"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" how"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'outer'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[s("code",[t._v("merge")]),t._v(" 函数提供了强大的合并和连接数据的能力, 你可以根据不同的场景和需求选择不同的合并方式。")]),t._v(" "),s("h3",{attrs:{id:"expanding"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#expanding"}},[t._v("#")]),t._v(" expanding")]),t._v(" "),s("blockquote",[s("p",[t._v("S.expanding() 作用及使用场景")])]),t._v(" "),s("p",[s("code",[t._v("S.expanding()")]),t._v(" 是 Pandas Series 和 DataFrame 对象的一个方法, 用于创建一个展开窗口。展开窗口是一个类似滑动窗口的概念, 但不会移动, 它从序列的开始一直扩展到当前位置。展开窗口对于计算累积、移动平均或其他累积性的统计量非常有用。")]),t._v(" "),s("p",[t._v("使用场景:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("累积统计")]),t._v(": 展开窗口可以用来计算累积统计量, 如累积和、累积平均、累积方差等。")]),t._v(" "),s("li",[s("strong",[t._v("滚动平均")]),t._v(": 如果你需要计算移动平均值, 但不需要滑动窗口, 你可以使用展开窗口。")]),t._v(" "),s("li",[s("strong",[t._v("分析时间序列数据")]),t._v(": 在时间序列数据分析中, 展开窗口通常用于计算累积收益、累积收益率等。")])]),t._v(" "),s("p",[t._v("以下是一个示例, 演示如何使用 S.expanding()来计算累积和:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pandas "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pd\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建一个示例 Series")]),t._v("\nS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Series"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 expanding() 计算累积和,计算过程详解")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   在位置 0, 展开窗口包括值 [1], 所以累积和是 1。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   在位置 1, 展开窗口包括值 [1, 2], 所以累积和是 1 + 2 = 3。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   在位置 2, 展开窗口包括值 [1, 2, 3], 所以累积和是 1 + 2 + 3 = 6。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   在位置 3, 展开窗口包括值 [1, 2, 3, 4], 所以累积和是 1 + 2 + 3 + 4 = 10。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   在位置 4, 展开窗口包括值 [1, 2, 3, 4, 5], 所以累积和是 1 + 2 + 3 + 4 + 5 = 15。")]),t._v("\ncumulative_sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expanding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cumulative_sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("以上代码将生成一个包含累积和的新 Series, 其中每个元素都是原始 Series 中对应位置及之前所有元素的累积和。这对于分析和可视化时间序列数据以及执行累积性计算非常有用。")]),t._v(" "),s("h3",{attrs:{id:"stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" stack")]),t._v(" "),s("p",[t._v("pandas 中的 DataFrame 对象提供了 stack() 方法, 用于将数据"),s("strong",[t._v("从列堆叠到行")]),t._v(", 从而创建一个具有多级索引的新 Series 对象。这个方法通常在数据透视和重塑操作中非常有用。")]),t._v(" "),s("p",[s("strong",[t._v("举例说明")]),t._v(": 原始数据为如下的 df, 通过 stack 的内容变化展示")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("原始 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pandas.core.frame.DataFrame'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":\n    A       B\n  one two one two\nX   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nY   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\nZ   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n\n堆叠后的 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pandas.core.frame.DataFrame'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":\n       A   B\nX one  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n  two  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nY one  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n  two  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\nZ one  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n  two  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n\n堆叠后的"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("class "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pandas.core.series.Series'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":\nX  one  A     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        B     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n   two  A     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n        B    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nY  one  A     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n        B     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n   two  A     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n        B    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\nZ  one  A     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n        B     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n   two  A     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n        B    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\ndtype: int64\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br")])]),s("h3",{attrs:{id:"unstack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unstack"}},[t._v("#")]),t._v(" unstack")]),t._v(" "),s("p",[s("code",[t._v("unstack")]),t._v(" 是 Pandas 中用于"),s("strong",[t._v("数据透视")]),t._v("的函数之一, 它用于将堆叠的数据重新排列为未堆叠的形式, 通常用于将多层索引的数据逆转。以下是 unstack 函数的一些常见用法和示例:")]),t._v(" "),s("p",[t._v("**语法: **")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("DataFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("level"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fill_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[s("strong",[t._v("level")]),t._v(": 可选参数, 指定要取消堆叠的索引级别。默认是取消最内层(level=-1)的堆叠。")]),t._v(" "),s("li",[s("strong",[t._v("fill_value")]),t._v(": 可选参数, 用于替换缺失值(NaN)的值。")])]),t._v(" "),s("p",[t._v("**示例: **\n假设有一个多层索引的 DataFrame:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pandas "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pd\n\ndata "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'two'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'two'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Y'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("ul",[s("li",[s("p",[t._v("**基本使用: **\n默认情况下, unstack 会取消堆叠最内层的索引:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("unstacked "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("**指定取消堆叠的级别: **\n您可以通过指定 level 参数来取消堆叠特定级别的索引。例如, 要取消堆叠第一级别的索引:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("unstacked "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("level"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("**处理缺失值: **\n如果在取消堆叠后出现缺失值, 您可以使用 fill_value 参数来指定要填充的值。例如, 使用 0 来填充缺失值:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("unstacked "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fill_value"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])]),t._v(" "),s("p",[t._v("unstack 的逆操作是 stack, 它可以将未堆叠的数据重新堆叠成多层索引的形式。这两个函数通常用于数据重塑和透视操作, 以便更方便地进行数据分析和处理。")]),t._v(" "),s("h3",{attrs:{id:"melt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#melt"}},[t._v("#")]),t._v(" melt")]),t._v(" "),s("p",[t._v("melt 函数, 其作用是将 DataFrame 从宽格式(wide format)转换为长格式(long format)。这通常用于数据重塑和数据可视化, 特别是在需要绘制多个变量的某种关系图时。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'config'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0-0-0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onLegoPopViewPreLoad'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2443")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pid'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30838")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2451")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yy'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2453")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'config'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0-0-0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onLegoPopViewPreLoad'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2549")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pid'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2749")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'config'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0-100-1000'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onLegoPopViewPreLoad'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2549")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pid'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2749")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建DataFrame")]),t._v("\ndf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nmelted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("melt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id_vars"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'config'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value_vars"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onLegoPopViewPreLoad'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yy'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pid'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" var_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Event'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmean "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" melted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groupby"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'config'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Event'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nresult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mean"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unstack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("上述的输出结果如下:")]),t._v(" "),s("div",{staticClass:"language-text line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Event       onLegoPopViewPreLoad      pid     xxx      yy\nconfig\n0-0-0                     2496.0  20419.0  2600.0  2453.0\n0-100-1000                2549.0  10000.0  2749.0     NaN\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("让我解释一下上述代码中的参数和作用:")]),t._v(" "),s("ul",[s("li",[t._v("df: 这是包含原始数据的 DataFrame。")]),t._v(" "),s("li",[t._v("id_vars='config': 这是一个可选参数, 用于指定在转换时要保留的列。在这里, 我们希望保留 config 列, 因为它将成为长格式的行索引。")]),t._v(" "),s("li",[t._v("value_vars=['onLegoPopViewPreLoad', 'xxx', 'yy']: 这是一个可选参数, 用于指定要包含在长格式中的值列。我们选择了三个事件列: onLegoPopViewPreLoad、xxx 和 yy。")]),t._v(" "),s("li",[t._v("var_name='Event': 这是一个可选参数, 用于指定新创建的列, 它将包含之前的事件列的名称。我们将其命名为 Event, 表示不同事件类型。")])]),t._v(" "),s("p",[t._v("通过运行 melt 函数, 原始宽格式的 DataFrame df 被重塑为长格式的 DataFrame melted, 其中 config 列作为行索引, Event 列用于标识事件类型, value 列包含了对应事件的值。这种长格式通常更适合用于绘制某些类型的图表, 如柱状图或折线图, 以便更好地可视化数据。")]),t._v(" "),s("h3",{attrs:{id:"pivot-数据透视表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pivot-数据透视表"}},[t._v("#")]),t._v(" pivot (数据透视表)")]),t._v(" "),s("RText",{attrs:{text:"简单示例"}}),t._v(" "),s("p",[t._v("当您想要对堆叠的数据进行透视(pivot)操作时, Pandas 中的 pivot_table 方法非常有用。这方法允许您在多维数据中重新排列和聚合数据以进行分析。以下是一个示例, 演示如何使用 pivot_table 进行透视操作:")]),t._v(" "),s("p",[t._v("假设您有以下数据, 记录了不同产品在不同月份的销售额:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pandas "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pd\n\ndata "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Product'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Month'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Feb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Feb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jan'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Feb'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sales'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("130")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("160")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("要对这些数据进行透视, 您可以使用 pivot_table 方法, 将产品(Product)作为行索引, 月份(Month)作为列索引, 并将销售额(Sales)作为值来进行汇总。示例代码如下:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("pivot_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pivot_table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Product'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" columns"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Month'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sales'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aggfunc"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sum'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这将生成一个新的 DataFrame "),s("code",[t._v("pivot_df")]),t._v(", 其中行索引是产品(Product), 列索引是月份(Month), 每个单元格的值表示销售额的总和。最后, 您可以按照需要进行数据分析和可视化。")]),t._v(" "),s("p",[t._v('参数 aggfunc:\naggfunc 的默认值是"mean", 表示使用平均值来聚合数据。但是, 您可以根据需要将其更改为其他聚合函数, 例如 "sum" 表示求和, "count" 表示计数, "min" 表示最小值, "max" 表示最大值等等。')]),t._v(" "),s("p",[t._v("这是 pivot_table 方法的一个简单示例, 用于将堆叠的数据重新排列以进行分析。根据您的数据和分析需求, 您可以选择不同的索引、列和聚合函数来完成透视操作。")]),t._v(" "),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),s("h3",{attrs:{id:"wide-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wide-format"}},[t._v("#")]),t._v(" wide format")]),t._v(" "),s("p",[t._v('"wide format"(宽格式)是一种数据排列格式, 其中每个变量通常以列的形式表示, 每一行则表示一个观察结果。在宽格式中, 数据通常会占据更多的列, 而行数相对较少。这种格式通常用于数据的录入、查看和简单的统计汇总。'),s("a",{attrs:{href:"https://stefvanbuuren.name/fimd/sec-longandwide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("longandwide"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("举个例子, 假设你有一个包含学生考试成绩的数据集, 其中每个学生有多个科目的成绩。在宽格式中, 数据可能如下所示: :")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("学生")]),t._v(" "),s("th",[t._v("科目 1")]),t._v(" "),s("th",[t._v("科目 2")]),t._v(" "),s("th",[t._v("科目 3")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("A")]),t._v(" "),s("td",[t._v("90")]),t._v(" "),s("td",[t._v("85")]),t._v(" "),s("td",[t._v("78")])]),t._v(" "),s("tr",[s("td",[t._v("B")]),t._v(" "),s("td",[t._v("88")]),t._v(" "),s("td",[t._v("92")]),t._v(" "),s("td",[t._v("75")])]),t._v(" "),s("tr",[s("td",[t._v("C")]),t._v(" "),s("td",[t._v("76")]),t._v(" "),s("td",[t._v("89")]),t._v(" "),s("td",[t._v("82")])])])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("在上面的示例中, 每个学生的成绩分布在不同的列中, 每一列代表一个科目。这是宽格式的典型示例。:")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("宽格式通常适合于人工录入和查看, 但在某些情况下, 特别是在数据分析和可视化方面, 更适合使用:")]),t._v('"long format"(长格式), 其中数据的排列更具灵活性, 以便进行更多类型的操作和分析。例如, 长格式数据通常更容易用于绘制多变量关系图、进行数据透视表操作以及进行各种数据分析任务。')])])]),t._v(" "),s("h3",{attrs:{id:"long-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#long-format"}},[t._v("#")]),t._v(" long format")]),t._v(" "),s("p",[t._v('"Long format"(长格式)是一种数据排列格式, 其中每个变量和其对应的值通常以行的形式表示, 而每一列表示不同的属性。在长格式中, 数据通常会占据更多的行, 而列数相对较多。这种格式通常更适合用于数据分析、可视化和处理多变量数据。'),s("a",{attrs:{href:"https://stefvanbuuren.name/fimd/sec-longandwide.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("longandwide"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("举个例子, 假设你有一个包含学生考试成绩的数据集, 其中每个学生有多个科目的成绩。在长格式中, 数据可能如下所示: :")])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("学生")]),t._v(" "),s("th",[t._v("科目")]),t._v(" "),s("th",[t._v("成绩")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("A")]),t._v(" "),s("td",[t._v("科目 1")]),t._v(" "),s("td",[t._v("90")])]),t._v(" "),s("tr",[s("td",[t._v("A")]),t._v(" "),s("td",[t._v("科目 2")]),t._v(" "),s("td",[t._v("85")])]),t._v(" "),s("tr",[s("td",[t._v("A")]),t._v(" "),s("td",[t._v("科目 3")]),t._v(" "),s("td",[t._v("78")])]),t._v(" "),s("tr",[s("td",[t._v("B")]),t._v(" "),s("td",[t._v("科目 1")]),t._v(" "),s("td",[t._v("88")])]),t._v(" "),s("tr",[s("td",[t._v("B")]),t._v(" "),s("td",[t._v("科目 2")]),t._v(" "),s("td",[t._v("92")])]),t._v(" "),s("tr",[s("td",[t._v("B")]),t._v(" "),s("td",[t._v("科目 3")]),t._v(" "),s("td",[t._v("75")])]),t._v(" "),s("tr",[s("td",[t._v("C")]),t._v(" "),s("td",[t._v("科目 1")]),t._v(" "),s("td",[t._v("76")])]),t._v(" "),s("tr",[s("td",[t._v("C")]),t._v(" "),s("td",[t._v("科目 2")]),t._v(" "),s("td",[t._v("89")])]),t._v(" "),s("tr",[s("td",[t._v("C")]),t._v(" "),s("td",[t._v("科目 3")]),t._v(" "),s("td",[t._v("82")])])])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("在上面的示例中, 每一行表示一个学生的成绩, 包括学生的姓名、所修科目和相应的成绩。这是长格式的典型示例。:")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("长格式通常更适合在数据分析、数据透视表、多变量关系图和其他复杂数据处理任务中使用。它提供了更大的灵活性, 可以更容易地进行多变量分析和数据操作。长格式也更容易与多种数据分析工具和库兼容。:")])])])]),t._v(" "),s("h3",{attrs:{id:"颜色映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#颜色映射"}},[t._v("#")]),t._v(" 颜色映射")]),t._v(" "),s("p",[t._v("颜色映射是数据可视化中常用的工具, 它将数值范围映射到不同的颜色, 以帮助观察者理解数据的分布和趋势。")]),t._v(" "),s("p",[t._v("Matplotlib(一个常用的 Python 数据可视化库)提供了众多内置的颜色映射, 以满足不同数据可视化需求。以下是一些常见的颜色映射名称:")]),t._v(" "),s("ul",[s("li",[t._v('"viridis"')]),t._v(" "),s("li",[t._v('"plasma"')]),t._v(" "),s("li",[t._v('"inferno"')]),t._v(" "),s("li",[t._v('"magma"')]),t._v(" "),s("li",[t._v('"cividis"')]),t._v(" "),s("li",[t._v('"gray"')]),t._v(" "),s("li",[t._v('"bone"')]),t._v(" "),s("li",[t._v('"hot"')]),t._v(" "),s("li",[t._v('"cool"')]),t._v(" "),s("li",[t._v('"Wistia"')]),t._v(" "),s("li",[t._v('"autumn"')]),t._v(" "),s("li",[t._v('"winter"')]),t._v(" "),s("li",[t._v('"spring"')]),t._v(" "),s("li",[t._v('"summer"')]),t._v(" "),s("li",[t._v('"seismic"')]),t._v(" "),s("li",[t._v('"YlGnBu"')]),t._v(" "),s("li",[t._v('"YlOrRd"')]),t._v(" "),s("li",[t._v('"RdYlBu"')]),t._v(" "),s("li",[t._v('"RdYlGn"')]),t._v(" "),s("li",[t._v('"coolwarm"')])]),t._v(" "),s("p",[t._v("这只是其中一小部分, Matplotlib 中提供了更多的颜色映射供选择。你可以根据数据的性质和可视化需求选择适当的颜色映射。要查看 Matplotlib 中可用的所有颜色映射, 你可以访问官方文档或使用如下代码:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" matplotlib"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pyplot "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" plt\n\ncmaps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" plt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("colormaps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cmaps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("这将打印出 Matplotlib 中可用的所有颜色映射名称列表。不同的颜色映射在颜色梯度和视觉效果上有所不同, 因此你可以根据你的数据和审美需求选择合适的颜色映射。")]),t._v(" "),s("h3",{attrs:{id:"timeit魔法命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#timeit魔法命令"}},[t._v("#")]),t._v(" "),s("code",[t._v("%timeit")]),t._v("魔法命令")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("%timeit df.apply"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lambda x: integrate_f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"N"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("axis")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("116")]),t._v(" ms +- "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.56")]),t._v(" ms per loop "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mean +- std. dev. of "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" runs, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" loops each"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v('%timeit 是一个用于在 Jupyter Notebook 中测试代码性能的魔法命令。在你的示例中, 你正在测试一个 DataFrame 上的 apply 函数, 该函数使用一个 lambda 函数来对 DataFrame 的每一行执行一个操作。在这种情况下, 你测试了对 DataFrame 的每一行应用 integrate_f 函数, 其中 integrate_f 函数需要每一行的 "a," "b," 和 "N" 列作为输入参数。')]),t._v(" "),s("p",[s("code",[t._v("%timeit")]),t._v(" 命令返回一些性能测量信息, 包括:")]),t._v(" "),s("ul",[s("li",[t._v("执行这行代码的平均时间(mean)")]),t._v(" "),s("li",[t._v("执行这行代码的标准差(std. dev.)")]),t._v(" "),s("li",[t._v("总共运行的次数(7 runs)")]),t._v(" "),s("li",[t._v("循环的次数(10 loops each)")])]),t._v(" "),s("p",[t._v("在你的示例中, 你的代码平均需要 116 毫秒执行一次, 并且标准差约为 5.56 毫秒。这是通过多次执行代码并计算平均值和标准差得出的结果。你的代码在 7 次运行中平均需要 116 毫秒。")]),t._v(" "),s("p",[t._v("%timeit 很有用, 因为它可以帮助你比较不同方法的性能, 找出哪种方法更有效。")]),t._v(" "),s("h3",{attrs:{id:"pyarrow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pyarrow"}},[t._v("#")]),t._v(" pyarrow")]),t._v(" "),s("p",[t._v("PyArrow(Apache Arrow 的 Python 实现)在 Pandas 中的角色是提供了一种高效的数据格式和数据交换方法, 以便在 Pandas 和其他数据处理工具之间进行数据交互。它主要发挥以下作用:")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("高性能数据交换")]),t._v(": PyArrow 提供了一个内存布局, 可以在 Pandas 和其他支持 Arrow 的数据处理工具之间进行高效的数据交换, 而无需复制或数据转换。这提高了数据处理速度, 特别是在大数据集的情况下。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Columnar 数据结构")]),t._v(": Arrow 的数据结构是列式的(columnar), 这与 Pandas 的数据帧(DataFrame)非常相似。这种列式存储结构在分析大数据集时非常高效, 因为它可以有效地进行压缩、并行处理和查询。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("跨平台和跨语言支持")]),t._v(": PyArrow 的 Arrow 数据格式是一种跨平台和跨语言的数据交换格式。这意味着你可以在不同编程语言之间轻松共享和交换数据, 包括 Python、C++、Java、R 等。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("文件格式")]),t._v(": Arrow 还定义了一种列式文件格式(Arrow Flight), 使得数据可以轻松存储为可跨平台的列式文件, 而无需经历复杂的数据导出和导入过程。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("互操作性")]),t._v(": Arrow 的存在增强了 Pandas 与其他数据处理工具、数据库和存储系统之间的互操作性。它允许 Pandas 用户更轻松地与其他工具集成和交换数据。")])])]),t._v(" "),s("p",[t._v("总之, PyArrow 作为 Pandas 的附加库, 提供了高性能、跨平台和跨语言的数据交换机制, 有助于改进 Pandas 与其他数据处理工具之间的数据交互, 并提高数据处理效率。")]),t._v(" "),s("h3",{attrs:{id:"堆叠的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆叠的数据"}},[t._v("#")]),t._v(" 堆叠的数据")]),t._v(" "),s("p",[t._v("堆叠的数据是一种多层索引的数据结构, 通常用于表示多维数据或多维度数据。在这种结构中, 数据被组织为多个层次的索引, 每个索引级别代表数据的一个维度或特征。这种数据结构在数据分析中非常有用, 因为它可以帮助组织和分析复杂的多维数据。")]),t._v(" "),s("p",[t._v("多层索引的数据结构可以在 Pandas 中使用 DataFrame 或 Series 来表示。每个索引级别都用于唯一标识数据点, 并且可以具体表示不同维度或特征中的取值。这使得堆叠的数据非常适用于存储和分析多类别数据、时间序列数据、多组实验数据等。")]),t._v(" "),s("p",[t._v("通过使用多层索引, 您可以更轻松地进行数据切片、筛选、分组和聚合操作, 以及绘制多维数据的图表和可视化。这使得堆叠的数据结构成为处理复杂数据的有力工具, 有助于更深入地理解数据中的关系和趋势。")]),t._v(" "),s("p",[s("strong",[t._v("举例")])]),t._v(" "),s("p",[t._v("让我们通过一个示例来说明堆叠的数据结构。假设您正在分析某个公司的销售数据, 其中包括不同产品、不同地区和不同时间的销售额。您希望将这些数据以堆叠的方式组织, 以便更容易进行分析。")]),t._v(" "),s("p",[t._v("假设您的原始数据如下:")]),t._v(" "),s("div",{staticClass:"language-plaintext line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plaintext"}},[s("code",[t._v("Product    Region    Date       Sales\nA          North     2021-01-01  100\nB          North     2021-01-01  150\nA          South     2021-01-01  120\nB          South     2021-01-01  130\nA          North     2021-01-02  110\nB          North     2021-01-02  160\nA          South     2021-01-02  130\nB          South     2021-01-02  140\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v('您可以使用堆叠的数据结构将数据重组为一个多层索引的 DataFrame。在这个示例中, 您可以将 "Product"、"Region" 和 "Date" 列作为索引级别, 以便在数据中表示产品、地区和时间的不同维度。')]),t._v(" "),s("p",[t._v("重组后的数据结构如下:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pandas "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pd\n\ndata "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Product'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Region'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'North'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'North'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'South'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'South'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'North'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'North'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'South'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'South'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Date'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-01-01'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-01-01'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-01-01'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-01-01'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-01-02'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-01-02'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-01-02'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-01-02'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Sales'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("130")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("160")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("130")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("140")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataFrame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Product'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Region'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Date'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("现在, 您的数据已经以堆叠的方式组织, 并可以轻松地进行多维分析。您可以按照不同索引级别进行切片、筛选和聚合操作, 以获取有关销售的更详细信息。例如, 您可以轻松地计算不同产品在不同地区和不同日期的销售总额, 或者绘制产品销售随时间的趋势图。")]),t._v(" "),s("p",[t._v("这是堆叠的数据结构如何帮助组织和分析多维数据的示例。它使数据分析更加灵活和有力。")]),t._v(" "),s("p",[t._v("**堆叠的数据相对于堆叠前有什么好处: **")]),t._v(" "),s("p",[t._v("堆叠的数据结构相对于未堆叠的数据具有一些好处, 特别是在多维数据分析和可视化方面。以下是一些好处:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("多维数据表示: 堆叠的数据结构能够更清晰地表示多维数据, 允许您将数据以更结构化的方式组织。这对于具有多个维度或特征的数据集非常有用, 例如时间序列数据、多组实验数据、多类别数据等。")])]),t._v(" "),s("li",[s("p",[t._v("灵活性: 堆叠的数据结构提供了更多的分析和操作灵活性。您可以根据需要使用不同的索引级别来访问和分析数据, 而不需要重新组织原始数据。")])]),t._v(" "),s("li",[s("p",[t._v("多维切片和筛选: 使用堆叠的数据结构, 您可以轻松地在多个索引级别上进行切片、筛选和子集选择。这使得在多维数据集中查找和提取特定数据更加方便。")])]),t._v(" "),s("li",[s("p",[t._v("数据聚合: 堆叠的数据结构可以更轻松地进行数据聚合操作, 例如计算每个索引组合的平均值、总和或其他汇总统计量。")])]),t._v(" "),s("li",[s("p",[t._v("数据可视化: 堆叠的数据结构有助于更容易创建多维数据的可视化图表。您可以根据不同的索引级别生成不同维度的图表, 以更好地理解数据。")])]),t._v(" "),s("li",[s("p",[t._v("数据分析: 多维数据的探索性数据分析更加直观, 您可以更容易地查看不同维度之间的关系和趋势。")])])]),t._v(" "),s("p",[t._v("总的来说, 堆叠的数据结构提供了更多的数据处理和分析选项, 特别适用于需要处理多维数据或多维度数据的情况。它使数据更有组织性, 更易于理解和利用。")]),t._v(" "),s("h3",{attrs:{id:"数据透视表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据透视表"}},[t._v("#")]),t._v(" 数据透视表")]),t._v(" "),s("blockquote",[s("p",[t._v('"pivot" 一词在数据处理中通常用来表示在某种方式上重新排列数据, 以便将原始数据按照不同的轴重新组织和展示')])]),t._v(" "),s("p",[t._v("数据透视表(Pivot Table)是数据分析和报表制作中常用的工具, 它可以用于对大量数据进行汇总和可视化展示。数据透视表通常用于以下情况:")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("汇总数据")]),t._v(": 数据透视表可以将大量的原始数据按照指定的方式进行分组和汇总, 以生成更简洁的摘要信息。这有助于从复杂的数据中提取有用的见解。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("多维度分析")]),t._v(": 数据透视表允许用户在多个维度上分析数据, 例如按时间、地区、产品类别等维度进行分组和分析。这有助于发现不同维度之间的关联和趋势。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("可视化")]),t._v(": 数据透视表通常以表格或交互式图形的形式呈现, 使数据更容易理解。用户可以根据需要自定义数据透视表的布局和可视化方式。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("过滤和筛选")]),t._v(": 数据透视表通常允许用户根据特定条件过滤和筛选数据, 以便进行更深入的分析。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("汇总函数")]),t._v(": 数据透视表支持各种汇总函数, 如求和、平均、最大值、最小值、中位数等, 以便计算和显示聚合数据。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("快速报表生成")]),t._v(": 数据透视表工具通常具有用户友好的界面, 可以通过拖放或选择字段来生成报表, 而无需编写复杂的代码。")])])]),t._v(" "),s("p",[t._v("Pandas 库中的 pivot_table 函数是一个常见的工具, 用于创建和操作数据透视表。数据透视表在数据分析、数据可视化和业务报表生成中非常有用, 因为它可以帮助用户更好地理解和解释数据。")]),t._v(" "),s("h3",{attrs:{id:"groupby-和-pivot-table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#groupby-和-pivot-table"}},[t._v("#")]),t._v(" groupby 和 pivot_table")]),t._v(" "),s("p",[s("code",[t._v("groupby")]),t._v(" 和 "),s("code",[t._v("pivot")]),t._v("_"),s("code",[t._v("table")]),t._v(" 是 "),s("code",[t._v("Pandas")]),t._v(" 中用于数据重塑和聚合的两种不同方法。")]),t._v(" "),s("p",[s("code",[t._v("groupby")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("groupby")]),t._v(" 用于将数据根据一个或多个列的值分组。\n您可以对每个组应用聚合函数, 例如 "),s("code",[t._v("sum")]),t._v(", "),s("code",[t._v("mean")]),t._v(", "),s("code",[t._v("count")]),t._v(", 等。")]),t._v(" "),s("li",[s("code",[t._v("groupby")]),t._v(" 通常用于生成汇总信息, 如计算每个组的总和、均值等。\n结果是一个 "),s("code",[t._v("GroupBy")]),t._v(" 对象, 您可以在其上应用聚合函数。")])]),t._v(" "),s("p",[t._v("示例:")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("grouped "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groupby"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'category'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nresult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" grouped"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("code",[t._v("pivot_table")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("pivot_table")]),t._v(" 用于将数据从长格式(long format)重塑为宽格式(wide format)。\n它允许您将一个或多个列作为行和列索引, 然后填充这些单元格的值。")]),t._v(" "),s("li",[s("code",[t._v("pivot_table")]),t._v(" 通常用于创建透视表, 将数据沿着不同的维度进行汇总。\n结果是一个新的数据框, 其中行和列被重新组织以便进行更方便的分析。")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("pivot_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pivot_table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'date'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" columns"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'category'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'value'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" aggfunc"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sum'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("总结")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("使用 "),s("code",[t._v("groupby")]),t._v(" 当您希望按照某些列的值对数据进行分组, 并对每个组应用聚合操作。")]),t._v(" "),s("li",[t._v("使用 "),s("code",[t._v("pivot")]),t._v("_"),s("code",[t._v("table")]),t._v(" 当您希望将数据从长格式(例如时间序列数据)转换为宽格式, 以便进行透视分析或制作透视表。")])]),t._v(" "),s("p",[t._v("这两种方法在不同情况下非常有用, 具体取决于您的数据分析需求。")]),t._v(" "),s("h3",{attrs:{id:"堆叠的数据与宽格式-长格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆叠的数据与宽格式-长格式"}},[t._v("#")]),t._v(" 堆叠的数据与宽格式, 长格式")]),t._v(" "),s("p",[t._v("堆叠的数据、宽格式和长格式是数据在数据分析领域中的不同表示方式, 它们之间存在关系, 通常用于不同的数据分析需求。")]),t._v(" "),s("p",[s("strong",[t._v("宽格式(Wide Format)")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("宽格式数据通常以表格的形式表示, 其中每个变量(列)占据表格的一列, 每行表示一个观察或数据点。")]),t._v(" "),s("li",[t._v("这种格式适合于一次性查看多个变量和进行某些类型的统计分析。")]),t._v(" "),s("li",[t._v("宽格式数据对于简单的数据报表和可视化非常有用。")])]),t._v(" "),s("p",[s("strong",[t._v("长格式(Long Format)")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("长格式数据通常具有多层索引, 其中每个观察都可以由多个索引级别来唯一标识。")]),t._v(" "),s("li",[t._v("这种格式适合于包含多维数据或多维度数据的情况, 例如时间序列数据、多组实验数据或多类别数据。")]),t._v(" "),s("li",[t._v("长格式数据通常使用 Pandas 的 MultiIndex(多层索引)或包含多个变量的列来表示。")])]),t._v(" "),s("p",[s("strong",[t._v("堆叠的数据(Stacked Data)")]),t._v(":")]),t._v(" "),s("ul",[s("li",[t._v("堆叠的数据通常是长格式数据的一种表示方式, 其中数据以多层索引的形式存储, 使得每个数据点都可以由多个索引级别来唯一标识。")]),t._v(" "),s("li",[t._v("这种格式通常用于多维数据或多维度数据的表示, 允许更灵活的分析和操作。")]),t._v(" "),s("li",[t._v("堆叠数据通常在 Pandas 中使用 MultiIndex 的 DataFrame 或 Series 来表示。")])]),t._v(" "),s("p",[t._v("**关系: **")]),t._v(" "),s("ul",[s("li",[t._v("堆叠的数据可以视为长格式数据的一种表示方式, 其中多层索引的使用允许更灵活地表示多个维度或多个特征。")]),t._v(" "),s("li",[t._v("当需要在长格式和宽格式之间切换时, Pandas 提供了许多方法, 如 pivot、pivot_table、melt 等, 以帮助数据的转换和透视。")])]),t._v(" "),s("p",[t._v("总之, 这些数据表示格式之间存在关系, 您可以根据您的数据和分析需求选择最适合的格式。通常, 长格式和堆叠的数据更适合多维数据, 而宽格式更适合简单的数据报表和可视化。")]),t._v(" "),s("h3",{attrs:{id:"style"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#style"}},[t._v("#")]),t._v(" style")]),t._v(" "),s("p",[t._v("style.apply 和 style.applymap 都是 Pandas 的样式功能中的方法, 用于在 DataFrame 的元素上应用样式。虽然它们的名称相似, 但它们的用法和适用范围略有不同。")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("style.applymap")]),t._v(":")])]),t._v(" "),s("p",[t._v("适用范围: 用于 DataFrame 中的每个元素。\n用法: 接受一个函数, 该函数将被应用于 DataFrame 的每个元素, 使你能够基于元素的值来自定义样式。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("style_function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 CSS 样式字符串")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'color: red'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'color: green'")]),t._v("\n\nstyled_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("applymap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("style_function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[t._v("style.apply")]),t._v(":")])]),t._v(" "),s("p",[t._v("适用范围: 用于按行或按列对 DataFrame 应用样式。\n用法: 接受一个函数, 并指定轴(axis), 函数将按照指定的轴应用于 DataFrame。这允许你在整行或整列上根据一些聚合或条件来定义样式。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("style_function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("series"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回 CSS 样式字符串")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'color: red'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'color: green'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" series"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nstyled_df "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" df"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("style_function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" axis"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在列上应用样式")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("总体而言, style.applymap 更适合在每个单独的元素上应用样式, 而 style.apply 更适合在整行或整列上应用样式。在选择使用哪个方法时, 取决于你想要的样式效果以及你希望在 DataFrame 的哪个级别上应用样式。")]),t._v(" "),s("h3",{attrs:{id:"shift-和-rolling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shift-和-rolling"}},[t._v("#")]),t._v(" shift 和 rolling")]),t._v(" "),s("p",[t._v("shift 和 rolling 是 pandas 中用于时间序列数据处理的两个常用函数, 它们分别用于对数据进行移动和滚动计算。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("shift:\n作用:  shift 主要用于将数据向前或向后移动指定数量的步长。")])]),t._v(" "),s("li",[s("p",[t._v("rolling:\n作用:  rolling 主要用于执行滚动计算, 例如计算滚动均值或滚动总和。")])])]),t._v(" "),s("h2",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://pandas.pydata.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pandas"),s("OutboundLink")],1),t._v(" "),s("ul",[s("li",[t._v("[reference]https://pandas.pydata.org/docs/reference/")])])]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.w3resource.com/pandas/dataframe/dataframe.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("w3c-Pandas: DataFrame"),s("OutboundLink")],1)])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);