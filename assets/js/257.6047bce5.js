(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{573:function(t,e,s){"use strict";s.r(e);var a=s(4),o=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"node-js-是多线程的吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js-是多线程的吗"}},[t._v("#")]),t._v(" node.js 是多线程的吗?")]),t._v(" "),e("p",[t._v("在 Node.js 中, JavaScript 代码是运行在单线程的事件循环(event loop)中的, 因此在这个意义上来说, Node.js 是单线程的。这意味着 JavaScript 代码在任何给定的时刻只能在一个线程上执行, 并且事件循环保证了代码的执行顺序和不会出现并发问题。")]),t._v(" "),e("p",[t._v("然而, Node.js 在执行异步操作时(例如文件 I/O、网络请求、定时器等), 会利用底层操作系统提供的多线程机制来实现并发执行。这意味着虽然 JavaScript 代码是单线程执行的, 但 "),e("RText",{attrs:{text:"Node.js 底层的操作系统线程池会处理并发执行异步操作, 以提高性能和吞吐量"}}),t._v("。")],1),t._v(" "),e("p",[t._v("因此, 尽管 Node.js 的 JavaScript 代码是单线程的, 但它可以利用多线程来执行异步操作, 从而实现了非阻塞的 I/O 操作和高效的并发处理。")])])}),[],!1,null,null,null);e.default=o.exports}}]);