(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{374:function(e,a,t){"use strict";t.r(a);var s=t(4),r=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),a("p",[e._v("Gradle is an open-source build automation tool flexible enough to build almost any type of software. Gradle makes few assumptions about what you’re trying to build or how to build it. This makes Gradle particularly flexible.\n"),a("a",{attrs:{href:"https://gradle.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"common"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common"}},[e._v("#")]),e._v(" common")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("./gradlew :<module>:dependencies")]),e._v(": 打印依赖\n"),a("ul",[a("li",[a("code",[e._v("./gradlew :<module>:dependencies --configuration releaseCompileClasspath")]),e._v(": 打印指定变体 releaseCompileClasspath 依赖")])])])]),e._v(" "),a("h2",{attrs:{id:"agp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#agp"}},[e._v("#")]),e._v(" AGP")]),e._v(" "),a("h3",{attrs:{id:"agp-升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#agp-升级"}},[e._v("#")]),e._v(" AGP 升级")]),e._v(" "),a("h3",{attrs:{id:"prefab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prefab"}},[e._v("#")]),e._v(" prefab")]),e._v(" "),a("p",[e._v("在过去进行 "),a("code",[e._v("native")]),e._v(" 开发的时候, 如果想要依赖其他的 "),a("code",[e._v("native")]),e._v(" 库时一般需要将头文件和.so/.a 拷贝一份到当前仓库内。这种方式不仅更新 native 库版本不容易, 还会因为存放二进制文件导致仓库变大。Google 为了解决这个问题, 提出了一个格式叫做 "),a("code",[e._v("Prefab | prefab (google.github.io)")]),e._v("。简单来说, "),a("code",[e._v("Prefab")]),e._v(" 是一种为预构建 "),a("code",[e._v("C/C++")]),e._v(" 库生成构建系统集成的工具, "),a("code",[e._v("Prefab")]),e._v(" 包由少量元数据和它所描述的预构建库组成。\nGoogle 在新版本的安卓打包插件(AGP)内会识别和生成 "),a("code",[e._v("prefab")]),e._v(", 现在可以从应用的 AAR 依赖项导入 C/C++ 库头文件, 也可以在发布 AAR 时携带自己的头文件:")]),e._v(" "),a("ul",[a("li",[e._v("AGP4.0 时提供了识别 prefab 功能: "),a("a",{attrs:{href:"https://developer.android.com/studio/releases/gradle-plugin?buildsystem=cmake#native-dependencies",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developer.android.com/studio/releases/gradle-plugin?buildsystem=cmake#native-dependencies"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("AGP4.1 时提供了发布 prefab 功能: "),a("a",{attrs:{href:"https://developer.android.com/studio/releases/gradle-plugin?buildsystem=cmake#4.1-prefab-publish",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developer.android.com/studio/releases/gradle-plugin?buildsystem=cmake#4.1-prefab-publish"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"controlling-transitives"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controlling-transitives"}},[e._v("#")]),e._v(" Controlling Transitives")]),e._v(" "),a("h3",{attrs:{id:"share-versions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#share-versions"}},[e._v("#")]),e._v(" share versions")]),e._v(" "),a("blockquote",[a("p",[e._v("在 Gradle 构建中, 有两种常见的方式来管理依赖的共享版本: 平台(platform)方式和目录(catalog)方式。\n要知道更多详情可见官网 "),a("a",{attrs:{href:"https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import",target:"_blank",rel:"noopener noreferrer"}},[e._v("share version"),a("OutboundLink")],1)])]),e._v(" "),a("ol",[a("li",[a("p",[e._v("平台方式(Platform-based Approach):")]),e._v(" "),a("ul",[a("li",[e._v('平台方式通过定义一个称为"平台"(platform)的依赖项来管理共享版本。')]),e._v(" "),a("li",[e._v("平台定义了一个版本, 而不是具体的依赖项。它充当一个版本约束, 可以在多个子项目中共享。")]),e._v(" "),a("li",[e._v("平台可以包含多个相关联的依赖项, 并确保它们使用相同的版本。")]),e._v(" "),a("li",[e._v("子项目可以声明对平台的依赖, 而不需要指定具体的版本号。")]),e._v(" "),a("li",[e._v("平台方式适用于具有多个子项目, 并且需要确保这些子项目使用相同版本的依赖项。")])])]),e._v(" "),a("li",[a("p",[e._v("目录方式(Catalog-based Approach):")]),e._v(" "),a("ul",[a("li",[e._v('目录方式通过定义一个称为"目录"(catalog)的依赖项来管理共享版本。')]),e._v(" "),a("li",[e._v("目录是一个定义了多个依赖项及其相应版本的集合。")]),e._v(" "),a("li",[e._v("目录中的依赖项可以按组织结构或其他自定义规则进行组织。")]),e._v(" "),a("li",[e._v("子项目可以引用目录中的依赖项, 并指定相应的版本号。")]),e._v(" "),a("li",[e._v("目录方式适用于需要在一个中心位置管理多个依赖项及其版本的场景。")])])])]),e._v(" "),a("p",[e._v("选择使用平台方式还是目录方式取决于项目的需求和组织结构。以下是一些考虑因素:")]),e._v(" "),a("ul",[a("li",[e._v("如果您的项目有多个子项目, 并且您希望确保它们使用相同版本的依赖项, 那么平台方式是一个不错的选择。")]),e._v(" "),a("li",[e._v("如果您希望在一个中心位置定义和管理依赖项及其版本, 以便供多个项目使用, 那么目录方式可能更适合。")]),e._v(" "),a("li",[e._v("平台方式更适合于管理大型项目的版本依赖关系, 而目录方式则更适合于组织结构较简单的项目。")])]),e._v(" "),a("p",[e._v("要在 Gradle 项目中选择使用平台方式还是目录方式, 您需要根据项目的具体需求进行评估, 并在构建脚本中进行相应的配置。您可以使用 Gradle 的相关插件或功能来定义和管理平台或目录。")]),e._v(" "),a("h3",{attrs:{id:"解决版本号冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决版本号冲突"}},[e._v("#")]),e._v(" 解决版本号冲突")]),e._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://docs.gradle.org/current/userguide/resolution_rules.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Customizing resolution of a dependency directly"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("示例")]),e._v(" "),a("div",{staticClass:"language-groovy line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[e._v("subprojects "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    group "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'xxx'")]),e._v("\n    configurations"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("all "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" Configuration configuration "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("->")]),e._v("\n        configuration"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("resolutionStrategy "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("preferProjectModules")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("force")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<group>:<artifact>:<version>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("【注】发布到 maven 的话不要用 force 关键字, 会导致其他依赖你的库 也锁死了相关库的版本号")]),e._v(" "),a("h2",{attrs:{id:"other"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[e._v("#")]),e._v(" other")]),e._v(" "),a("h3",{attrs:{id:"debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[e._v("#")]),e._v(" debug")]),e._v(" "),a("p",[e._v("方案一:  利用 gradle 的参数让其等待我们的调试进程 attach 上去")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("gradle :app:clean "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-Dorg.gradle.debug")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true  --no-daemon\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("后续操作可以参考:  "),a("a",{attrs:{href:"https://fucknmb.com/2017/07/05/%E5%8F%88%E6%8E%8C%E6%8F%A1%E4%BA%86%E4%B8%80%E9%A1%B9%E6%96%B0%E6%8A%80%E8%83%BD-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95Gradle%E6%8F%92%E4%BB%B6/",target:"_blank",rel:"noopener noreferrer"}},[e._v("断点调试"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("方案二: 用环境变量")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GRADLE_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("而后执行跟正常的命令是一样的")])])}),[],!1,null,null,null);a.default=r.exports}}]);