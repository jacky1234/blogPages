(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{388:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("jadx: Dex to Java decompiler 是一款用于将 Android APK 文件反编译为可读的 Java 源代码的开源工具。它可以帮助开发人员和安全研究人员分析和理解 Android 应用程序的内部结构、逻辑和实现细节。 可以使用 "),a("code",[s._v("brew install jadx")]),s._v(" 来安装。")])]),s._v(" "),a("h2",{attrs:{id:"feature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feature"}},[s._v("#")]),s._v(" feature")]),s._v(" "),a("p",[s._v("以下是 jadx 工具的一些主要特点和功能:")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("反编译 APK 文件: jadx 可以将 Android APK 文件转换为可读的 Java 源代码, 并提取出应用程序中的类、方法、字段等信息。")])]),s._v(" "),a("li",[a("p",[s._v("可视化展示: jadx 提供了一个用户友好的图形界面, 可以以树状结构形式展示应用程序的包、类、方法等元素, 使得代码浏览和分析更加方便。")])]),s._v(" "),a("li",[a("p",[s._v("跨平台支持: jadx 支持在多个操作系统上运行, 包括 Windows、Linux 和 macOS, 可以在不同环境中使用。")])]),s._v(" "),a("li",[a("p",[s._v("支持最新的 Android 版本: jadx 对 Android 的最新版本和特性提供了支持, 可以处理使用较新 API 级别构建的应用程序。")])]),s._v(" "),a("li",[a("p",[s._v("反混淆支持: 对于已经进行了代码混淆的应用程序, jadx 可以尝试还原原始的类、方法和字段名称, 以便更好地理解代码。")])]),s._v(" "),a("li",[a("p",[s._v("代码导航和搜索: jadx 提供了代码导航和搜索功能, 可以快速定位特定的类、方法、字段或关键字, 便于快速浏览和分析代码。")])]),s._v(" "),a("li",[a("p",[s._v("导出功能: jadx 允许将反编译的代码导出为 Java 源代码或 Smali 格式, 方便进一步的分析和处理。")])])]),s._v(" "),a("p",[s._v("总体而言, jadx 是一个功能强大且易于使用的工具, 可以帮助开发人员和安全研究人员对 Android 应用程序进行逆向工程和代码分析。它可以提供有关应用程序内部实现的深入洞察, 并帮助解决问题、修复错误或进行安全评估。")]),s._v(" "),a("h2",{attrs:{id:"help"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#help"}},[s._v("#")]),s._v(" help")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" % jadx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-h")]),s._v("\n\njadx - dex to "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" decompiler, version: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.5")]),s._v(".0\n\nusage: jadx "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("input files"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(".apk, .dex, .jar, .class, .smali, .zip, .aar, .arsc, .aab, .xapk, .jadx.kts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ncommands "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<command> --help'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":\n  plugins\t  - manage jadx plugins\n\noptions:\n  -d, --output-dir                    - output directory\n  -ds, --output-dir-src               - output directory "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" sources\n  -dr, --output-dir-res               - output directory "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" resources\n  -r, --no-res                        - "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" not decode resources\n  -s, --no-src                        - "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" not decompile "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" code\n  --single-class                      - decompile a single class, full name, raw or "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("alias")]),s._v("\n  --single-class-output               - "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" decompile a single class\n  --output-format                     - can be "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'java'")]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'json'")]),s._v(", default: "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v("\n  -e, --export-gradle                 - save as android gradle project\n  -j, --threads-count                 - processing threads count, default: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n  -m, --decompilation-mode            - code output mode:\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'auto'")]),s._v(" - trying best options "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'restructure'")]),s._v(" - restore code structure "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("normal "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'simple'")]),s._v(" - simplified instructions "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("linear, with goto"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s)\n                                         '")]),s._v("fallback"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - raw instructions without modifications\n  --show-bad-code                     - show inconsistent code (incorrectly decompiled)\n  --no-xml-pretty-print               - do not prettify XML\n  --no-imports                        - disable use of imports, always write entire package name\n  --no-debug-info                     - disable debug info parsing and processing\n  --add-debug-lines                   - add comments with debug line numbers if available\n  --no-inline-anonymous               - disable anonymous classes inline\n  --no-inline-methods                 - disable methods inline\n  --no-move-inner-classes             - disable move inner classes into parent\n  --no-inline-kotlin-lambda           - disable inline for Kotlin lambdas\n  --no-finally                        - don'")]),s._v("t extract finally block\n  --no-replace-consts                 - don"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t replace constant value with matching constant field\n  --escape-unicode                    - escape non latin characters in strings (with \\u)\n  --respect-bytecode-access-modifiers - don'")]),s._v("t change original access modifiers\n  --mappings-path                     - deobfuscation mappings "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" or directory. Allowed formats: Tiny and Tiny v2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("both "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.tiny'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", Enigma "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(".mapping"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" or Enigma directory\n  --mappings-mode                     - "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" mode "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" handling the deobfuscation mapping file:\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'read'")]),s._v(" - just read, user can always save manually "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'read-and-autosave-every-change'")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" and autosave after every change\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'read-and-autosave-before-closing'")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" and autosave before exiting the app or closing the project\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ignore'")]),s._v(" - don"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t read or save (can be used to skip loading mapping files referenced in the project file)\n  --deobf                             - activate deobfuscation\n  --deobf-min                         - min length of name, renamed if shorter, default: 3\n  --deobf-max                         - max length of name, renamed if longer, default: 64\n  --deobf-whitelist                   - space separated list of classes (full name) and packages (ends with '")]),s._v(".*"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("') to exclude from deobfuscation, default: android.support.v4.* android.support.v7.* android.support.v4.os.* android.support.annotation.Px androidx.core.os.* androidx.annotation.Px\n  --deobf-cfg-file                    - deobfuscation mappings file used for JADX auto-generated names (in the JOBF file format), default: same dir and name as input file with '")]),s._v(".jobf"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' extension\n  --deobf-cfg-file-mode               - set mode for handling the JADX auto-generated names'")]),s._v(" deobfuscation map file:\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'read'")]),s._v(" - "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" found, don"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t save (default)\n                                         '")]),s._v("read-or-save"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - read if found, save otherwise (don'")]),s._v("t overwrite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                                         "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'overwrite'")]),s._v(" - don"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t read, always save\n                                         '")]),s._v("ignore"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - don'")]),s._v("t "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" and don"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t save\n  --deobf-use-sourcename              - use source file name as class name alias\n  --deobf-res-name-source             - better name source for resources:\n                                         '")]),s._v("auto"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - automatically select best name (default)\n                                         '")]),s._v("resources"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - use resources names\n                                         '")]),s._v("code"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - use R class fields names\n  --use-kotlin-methods-for-var-names  - use kotlin intrinsic methods to rename variables, values: disable, apply, apply-and-hide, default: apply\n  --rename-flags                      - fix options (comma-separated list of):\n                                         '")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - fix case sensitivity issues (according to --fs-case-sensitive option),\n                                         '")]),s._v("valid"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - rename java identifiers to make them valid,\n                                         '")]),s._v("printable"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - remove non-printable chars from identifiers,\n                                        or single '")]),s._v("none"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - to disable all renames\n                                        or single '")]),s._v("all"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - to enable all (default)\n  --integer-format                    - how integers are displayed:\n                                         '")]),s._v("auto"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - automatically select (default)\n                                         '")]),s._v("decimal"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - use decimal\n                                         '")]),s._v("hexadecimal"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' - use hexadecimal\n  --fs-case-sensitive                 - treat filesystem as case sensitive, false by default\n  --cfg                               - save methods control flow graph to dot file\n  --raw-cfg                           - save methods control flow graph (use raw instructions)\n  -f, --fallback                      - set '")]),s._v("--decompilation-mode"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' to '")]),s._v("fallback"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' (deprecated)\n  --use-dx                            - use dx/d8 to convert java bytecode\n  --comments-level                    - set code comments level, values: error, warn, info, debug, user-only, none, default: info\n  --log-level                         - set log level, values: quiet, progress, error, warn, info, debug, default: progress\n  -v, --verbose                       - verbose output (set --log-level to DEBUG)\n  -q, --quiet                         - turn off output (set --log-level to QUIET)\n  --version                           - print jadx version\n  -h, --help                          - print this help\n\nPlugin options (-P<name>=<value>):\n 1) dex-input: Load .dex and .apk files\n    - dex-input.verify-checksum       - verify dex file checksum before load, values: [yes, no], default: yes\n 2) java-convert: Convert .class, .jar and .aar files to dex\n    - java-convert.mode               - convert mode, values: [dx, d8, both], default: both\n    - java-convert.d8-desugar         - use desugar in d8, values: [yes, no], default: no\n 3) kotlin-metadata: Use kotlin.Metadata annotation for code generation\n    - kotlin-metadata.class-alias     - rename class alias, values: [yes, no], default: yes\n    - kotlin-metadata.method-args     - rename function arguments, values: [yes, no], default: yes\n    - kotlin-metadata.fields          - rename fields, values: [yes, no], default: yes\n    - kotlin-metadata.companion       - rename companion object, values: [yes, no], default: yes\n    - kotlin-metadata.data-class      - add data class modifier, values: [yes, no], default: yes\n    - kotlin-metadata.to-string       - rename fields using toString, values: [yes, no], default: yes\n    - kotlin-metadata.getters         - rename simple getters to field names, values: [yes, no], default: yes\n 4) rename-mappings: various mappings support\n    - rename-mappings.format          - mapping format, values: [AUTO, TINY_FILE, TINY_2_FILE, ENIGMA_FILE, ENIGMA_DIR, SRG_FILE, XSRG_FILE, JAM_FILE, CSRG_FILE, TSRG_FILE, TSRG_2_FILE, PROGUARD_FILE, RECAF_SIMPLE_FILE, JOBF_FILE], default: AUTO\n    - rename-mappings.invert          - invert mapping on load, values: [yes, no], default: no\n\nEnvironment variables:\n  JADX_DISABLE_XML_SECURITY - set to '")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' to disable all security checks for XML files\n  JADX_DISABLE_ZIP_SECURITY - set to '")]),s._v("true' to disable all security checks "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("zip")]),s._v(" files\n  JADX_ZIP_MAX_ENTRIES_COUNT - maximum allowed number of entries "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("zip")]),s._v(" files "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" 000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  JADX_TMP_DIR - custom temp directory, using system by default\n\nExamples:\n  jadx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" out classes.dex\n  jadx --rename-flags "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"none"')]),s._v(" classes.dex\n  jadx --rename-flags "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"valid, printable"')]),s._v(" classes.dex\n  jadx --log-level ERROR app.apk\n  jadx -Pdex-input.verify-checksum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("no app.apk\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br")])]),a("h2",{attrs:{id:"jadx-gui"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jadx-gui"}},[s._v("#")]),s._v(" jadx-gui")]),s._v(" "),a("h2",{attrs:{id:"link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link"}},[s._v("#")]),s._v(" link")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/skylot/jadx",target:"_blank",rel:"noopener noreferrer"}},[s._v("jadx"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=t.exports}}]);