(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{414:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"类加载过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[s._v("#")]),s._v(" 类加载过程")]),s._v(" "),a("p",[s._v("「加载」")]),s._v(" "),a("p",[s._v("将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存上创建一个java.lang.Class对象用来封装类在方法区内的数据结构作为这个类的各种数据的访问入口。")]),s._v(" "),a("p",[s._v("「验证」")]),s._v(" "),a("p",[s._v("主要是为了确保class文件中的字节流包含的信息是否符合当前JVM的要求，且不会危害JVM自身安全，比如校验文件格式、是否是cafe baby魔术、字节码验证等等。")]),s._v(" "),a("p",[s._v("「准备」")]),s._v(" "),a("p",[s._v("为类变量分配内存并设置类变量(是被static修饰的变量，变量不是常量，所以不是final的，就是static的)初始值的阶段。这些变量所使用的内存在方法区中进行分配。比如")]),s._v(" "),a("p",[s._v("private static int age = 26;\n类变量age会在准备阶段过后为 其分配四个(int四个字节)字节的空间，并且设置初始值为0，而不是26。")]),s._v(" "),a("p",[s._v("若是final的，则在编译期就会设置上最终值。")]),s._v(" "),a("p",[s._v("「解析」")]),s._v(" "),a("p",[s._v("JVM会在此阶段把类的二进制数据中的符号引用替换为直接引用。")]),s._v(" "),a("p",[s._v("「初始化」")]),s._v(" "),a("p",[s._v("初始化阶段是执行类构造器 "),a("code",[s._v("<clinit>()")]),s._v(" 方法的过程，到了初始化阶段，才真正开始执行类定义的Java程序代码(或者说字节码 )。比如准备阶段的那个age初始值是0，到这一步就设置为26。")]),s._v(" "),a("p",[s._v("「使用」")]),s._v(" "),a("p",[s._v("对象都出来了，业务系统直接调用阶段。")]),s._v(" "),a("p",[s._v("「卸载」")]),s._v(" "),a("p",[s._v("用完了，可以被GC回收了。")]),s._v(" "),a("h2",{attrs:{id:"类加载器种类以及加载范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载器种类以及加载范围"}},[s._v("#")]),s._v(" 类加载器种类以及加载范围")]),s._v(" "),a("h2",{attrs:{id:"双亲委派"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派"}},[s._v("#")]),s._v(" 双亲委派")]),s._v(" "),a("h2",{attrs:{id:"常见笔试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见笔试题"}},[s._v("#")]),s._v(" 常见笔试题")]),s._v(" "),a("h3",{attrs:{id:"illegal-forward-reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#illegal-forward-reference"}},[s._v("#")]),s._v(" Illegal forward reference")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译没报错")]),s._v("\n        i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译报错Illegal forward reference")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("错误的原因：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("静态变量的初始化顺序：在 Java 中，静态变量的初始化顺序是从上到下依次进行的。静态块中的代码会在静态变量初始化时执行。然而，在静态变量 i 完全初始化之前，你在静态块中使用了它，这就导致了非法的前向引用(Illegal forward reference)。")])]),s._v(" "),a("li",[a("p",[s._v("为什么 "),a("code",[s._v("i = 2")]),s._v(" 没报错？：静态变量在声明之前的赋值操作是允许的，但在其声明之前读取或使用它的值(如通过 "),a("code",[s._v("System.out.println(i)")]),s._v(")是不允许的。也就是说，赋值可以，但访问或读取是非法的。")])])]),s._v(" "),a("RText",{attrs:{text:"如何修复："}}),s._v(" "),a("p",[s._v("将 i 的声明提前到静态块之前即可避免该问题。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将静态变量声明放到前面")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译不会报错")]),s._v("\n        i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译不会再报错")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("在这个修复后的代码中，静态变量 i 已经被定义并初始化为 1，然后在静态块中修改为 2，并成功打印出结果。")])],1)}),[],!1,null,null,null);a.default=e.exports}}]);